[{"content":"Syllabus day 2022-01-11T15:30:00-05:00\nRead the syllabus and learn how you can get a million points!\nUsing GitHub for class 2022-01-13T15:30:00-05:00\nWeb basics History of the Web - Sir Tim Berners Lee\nA Short History of the Web - CERN\nGitHub organization for info You can find general information about the course (in addition to what is provided on this site) here: https://github.com/comp426-2022-spring/general-info\nFor questions and general troubleshooting/problems/etc. related to this class, create an issue on the general-info repo: https://github.com/comp426-2022-spring/general-info/issues\nGitHub issues for help with assignments Use the issues feature in GitHub to get help with assignments.\nEach assignment will have its own template repo. The repo for a00 is here: https://github.com/comp426-2022-spring/a00\nTo create an issue for a00, go here: https://github.com/comp426-2022-spring/a00/issues\nThis will help the instructional staff address your issues more efficiently and effectively during office hours.\nIt will also help triage and sort out issues that multiple students are having.\nPlease create an issue BEFORE you come to office hours.\nInclude a description of your issue, error logs, and screenshots to help us better understand what is happening.\nPlease use issues instead of email for help with assignments. If you email the instructional staff with questions about assignments, you will be directed to create an issue on the appropriate GitHub repo.\nGitHub discussions for other stuff If you do not have something that you think is worthy of an issue, but would like to discuss it with the instructional staff or other students, please use the discussion that has been set up for the general-info repo.\nAnnouncements will also be posted here and be marked as such.\n","description":"Syllabus day `\u0026\u0026` Using GitHub for class","id":0,"section":"w","tags":null,"title":"w00 Onboarding","uri":"https://comp426.johndmart.in/w/00/"},{"content":"DUE: 2022-01-21T00:00:00-5:00\nThe purpose of this is assignment is to get familiar with the tools that we will be using in COMP 426 for the rest of the semester as well as the assignment submission process.\nNote that this first assignment, a00, is graded only for general completion. Future assignments will be much deeper in scope, and you should expect to spend significantly more time on them.\nInstall Required Software Below are links to guides for installing the required software for this course. It is all free software and it is mostly open source software, with the exception of Chrome. Chrome is built on the Google\u0026rsquo;s open source Chromium code base, BUT Chrome itself is licensed as proprietary software.\nYou are not expected to purchase software for this course.\nThis software must be installed on your computer not only so you can complete the assignments, but also so you can receive help in office hours.\nYou will be installing the following:\n Chrome (web browser) Node.js (Javascript Runtime) git (version control/wofkflow management) bash (command shell) - Windows users will need to install the Windows Subsystem for Linux. MacOS and Linux users will already have this installed. VSCode / VIM (text editor)  You do not have to use a specific text editor for this class. HOWEVER, you should use a code editor that has good syntax highlighting.\nI encourage you to install and learn VIM in addition to or instead of VSCode.\nVisual Studio Code is recommended for COMP 426 as it is installable cross-platform and is also configured as the default IDE for our GitHub classroom assignments.\nWhenever you are installing software for development purposes, you should pay attention to version and backward compatibility.\nUnderstand the difference between current or latest versions and the Long Term Support (LTS) versions of packages you are using.\nIn this course we will use the current Node LTS version 16.13.2 (LTS). Node flipped from 14 as the LTS version to 16 in November 2021, so some techniques might need adapting but we will deal with that as it comes.\nMy recommendation is that you use a Node version manager of some kind to install and manage Node. It makes knowing what version you are using and keeping it up-to-date a lot easier.\nA note on installing software I am not going to labor over teaching you to install software in this class.\nYou are in a programming class. It is my expectation that you have, at the very minimum, the ability to understand how to install and configure software.\nThe instructional staff is happy to help you if you run into snags, but bear in mind that before you come to us with questions related to software installation and management, you should have exhausted all available resources in the form of documentation and reading (and Googling) error messages, etc.\nThis is your first opportunity for a bit of \u0026ldquo;Physician, healh thyself,\u0026rdquo; in this class.\nYou can do these things. You can FIGURE OUT HOW to do these things.\nI believe in you.\nWindows If you are running Windows, follow the Windows setup guide.\nREMEMBER: if you are using Windows, it is super important that you pay special attention to installing the Windows Subsystem for Linux.\nThis will allow you to run a Linux development environment, which is hugely helpful to you as a skill, and also makes teaching this course more straightforward, because everyone will have access to a UNIX-like system to develop on.\nMac If you have a Mac running OSX, follow the Mac setup guide.\nLinux If you run Linux, and you don\u0026rsquo;t already have the above list installed, you can follow the Linux setup guide.\nJoin GitHub classroom  Make sure you are logged into GitHub: https://github.com/login If you do not have a GitHub account, then create one and log in. Use the assignment link for this assignment: https://classroom.github.com/a/V3VIssyS.a On the next page, click the green button that says \u0026ldquo;Accept this assignment.\u0026rdquo; Read the text on the page that follows. It will say that it is configuring your repository and that you should refresh the page. Refresh the page. You will now see a page that shows a link to your repository. NB: This repository doesn\u0026rsquo;t exist under your GH account directly, but under the \u0026ldquo;organization\u0026rdquo; that owns the GitHub Classroom (jdmar3-comp426). Open the link to your repository page for a00, which should have the form of https://github.com/jdmar3-comp426/a00-$YOURGITHUBUSERNAME.  Set Up Workspace Now that you have installed all the preqrequisite software and joined our GitHub classroom, you can create your workspace and organize yourself for class.\nOur recommendation is that you create a directory called \u0026ldquo;comp426\u0026rdquo; or something similar which you will use to keep all of your work in.\nYou will have a repository for each assignment and so you can use this directory to clone all of your repos into.\nSome of the assignments have their own starter code and some are just blank repos that you will commit your code to and then push back up to GitHub.\nClone the starter code repo There are multiple ways to clone a repo and get yourself up and running.\nBelow we will detail doing this in VSCode and in a Bash shell.\nVSCode  Open Visual Studio Code (You can also do this by clicking on the VSCode button right in your repo page. You will have to authorize VSCode to use your GH account to install a GitHub Classroom plugin.) Click the Explorer tab on the left. You will see a button that says \u0026ldquo;Clone Repository\u0026rdquo; (hopefully). Follow the prompts for authorizing VSCode to use your GH account. You should see a bar at the top that says \u0026ldquo;Provide repository URL or pick a repository source.\u0026rdquo; Go back to your repository page for your repository and click the green button that says \u0026ldquo;Code.\u0026rdquo; Copy the repo link. Paste the link into the repository bar and press enter. It will prompt you for a location to clone the repo into. Once it is cloned, VSCode will ask if you want to open the cloned repository. Open it. You should now see the contents of your repository in VSCode.  BASH $ cd Documents $ mkdir comp426 $ cd comp426 $ git clone https://github.com/jdmar3-comp426/`a00-$YOURGITHUBUSERNAME`.git Cloning into 'a00-johnmar3'... remote: Enumerating objects: 12, done. remote: Counting objects: 100% (12/12), done. remote: Compressing objects: 100% (10/10), done. remote: Total 12 (delta 2), reused 2 (delta 0), pack-reused 0 Receiving objects: 100% (12/12), 14.37 KiB | 7.19 MiB/s, done. Resolving deltas: 100% (2/2), done. $ cd a00-$YOURGITHUBUSERNAME $ ls Et voila! You are in the directory containing your repository! You should be able to see the base files in the repository after your ls command. Now you can open in it whatever editor you wish.\nCreate a demo project After completing the last section, your computer should be set up for developing websites in COMP 426! Let\u0026rsquo;s run through a quick demo to make sure everything works.\nFor this demo, we\u0026rsquo;re going to pretend we\u0026rsquo;re starting a new web dev project. We\u0026rsquo;ll set up a new project directory using npm and Visual Studio Code. Pay close attention to this process, because you\u0026rsquo;ll want to repeat it every time you start working on a new COMP 426 assignment that does not already have a packages.json file in it. In fact, this process can even be used outside of class in the real world to get set up working on new web-based projects.\nCreate a project directory and initialize with npm The first step for starting a new project is usually to create a new folder that will store your project code. However, for this assignment and for others, you will already have a directory created when you clone your assignment repo. You can see these folders in the left side panel of Visual Studio Code, which shows the file explorer.\nThe file explorer can be toggled open or closed by clicking on the pictured icon.\nIf you were going to be creating a new project folder, you could do it by right clicking in the empty space at the bottom of the explorer and clicking \u0026ldquo;New Folder.\u0026rdquo; However, for this demo we will just use the existing folder a00-$YOURGITHUBUSERNAME.\nNext, right click on the folder a00-$YOURGITHUBUSERNAME and click \u0026ldquo;Open in Terminal.\u0026rdquo; This will open a new terminal window pointing at the a00-$YOURGITHUBUSERNAME folder. This raises an important fact about terminals\u0026mdash;they always point to a specific folder location in your computer. Usually, the terminal prompt will give some indication of which folder it is currently pointing at. For instance, you might see something like this:\n1  your-computer-name:`a00-$YOURGITHUBUSERNAME` yourname$   The important thing here is a00-$YOURGITHUBUSERNAME, which indicates that you are currently in the a00-$YOURGITHUBUSERNAME folder.\nThere is a special terminal command, pwd, which tells you exactly which folder the terminal is currently in. pwd stands for \u0026ldquo;print working directory.\u0026rdquo; Try running pwd in your terminal window now, and verify that it is pointing to the a00-$YOURGITHUBUSERNAME folder.\n1 2  $ pwd /home/YOURUSERNAME/Documents/comp426/`a00-$YOURGITHUBUSERNAME`    Whenever you are working on a particular assignment, it is absolutely crucial that you run any related terminal commands from inside the assignment\u0026rsquo;s folder.\n Once you have confirmed that your terminal is pointing to the a00 folder, run the command npm init. This command tells npm to create a brand new web project in the current folder. As part of the initialization process, it\u0026rsquo;ll ask you a long list of questions about your new web project. It\u0026rsquo;s okay to just press enter through all the prompts.\n1  $ npm init    What does running npm init actually do? It\u0026rsquo;s actually pretty simple: it just creates a new package.json file in the current directory. The package.json file is npm\u0026rsquo;s version of a configuration file for your entire web project. It includes lots of valuable information about your project including the project\u0026rsquo;s name, version, description, and author. It also includes a list of the dependencies that your project relies on, and a list of custom scripts, or actions, that may be a part of your web application. The answers you type to the questions asked during the npm init process are used to add more information to the package.json file that is created for your project.\n At this point, the a00-$YOURGITHUBUSERNAME folder should now have a brand new package.json file with the following contents:\n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;name\u0026#34;: \u0026#34;a00\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; }   Add some HTML Next, let\u0026rsquo;s add some html. Right click on the a00-$YOURGITHUBUSERNAME folder, select \u0026ldquo;New File,\u0026rdquo; and name the new file index.html.\nWrite (do not copy and paste) the following code into the new file and save:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Alphabet\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Alphabet table\u0026lt;/h1\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Column 0\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Column 1\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;A\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;B\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;C\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;D\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;E\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;F\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;G\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;?\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;?\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Commit changes You have just added a file. Save it and then look at the tabs on the left. You should see one that has a blue dot with a number: it is the source control tab. This means that you have changes you need to commit.\nYou can review the changes and explore the tree, etc. For now, click the check mark, which will trigger a commit. A bar will appear at the top asking you to write a commit message. Write something meaningful to let your future self know what you did: \u0026ldquo;added index.html\u0026rdquo;.\nTo make a commit in your terminal from inside the a00-$YOURGITHUBUSERNAME directory, run the following:\n$ git add -v . $ git commit -a -m \u0026quot;added index.html\u0026quot; The first command adds any new files that you created. The second command commits the changes and leaves a log message. Make commits anytime you add or edit files after you have tested them to make sure they are working properly. To test them, keep following these instructions.\nInstall Browsersync Next, we\u0026rsquo;re going to use npm to add our first dependency to the new a00 web project. The package we\u0026rsquo;ll add is called Browsersync, and it will help make web development much easier! Browsersync is a \u0026ldquo;dev server,\u0026rdquo; and its job is to show you what your website looks like in real time as you actively make changes to your code. Browsersync works by pretending to be a real web server, running in the background on your computer and monitoring changes to the files in your project directory. Although it\u0026rsquo;s optional, you may wish to install and use Browsersync when working on all assignments for COMP 426.\nTo install Browsersync as a dependency for a00-$YOURGITHUBUSERNAME, run the following command inside the a00-$YOURGITHUBUSERNAME terminal:\n1  $ npm install browser-sync    Remember back in Section 2.2 when we ran npm install to install dependencies for the COMP 426 code? This time we\u0026rsquo;re adding the extra word (called a command line argument) browser-sync to the command. This tells npm to search online for the package named browser-sync, add it as a dependency to our new project a00, and download it. One simple command automatically added a powerful third-party program to your new app\u0026mdash;without even writing a single line of code! We\u0026rsquo;ll be using npm install a lot this semester to add other third-party packages to our code.\n Note: To get credit for a00, you must have Browsersync added as a dependency to your project.\nStart the development server With the simple index.html file in place, its time to see if things actually work. Using the terminal inside the a00-$YOURGITHUBUSERNAME folder, run the following command to start the development server:\n1  $ npx browser-sync start -sw   A browser window should have been automatically opened, showing the HTML page we created in the prior step. If not, open http://localhost:3000/ in Google Chrome. You should see the text inside the \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; and \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; now being rendered on the website.\n Note: The command npx browser-sync start -sw is worth memorizing, especially if you plan to use Browsersync for assignments in COMP 426 (which is highly recommended). Browsersync is actually quite a powerful tool, although we won\u0026rsquo;t get into the more advanced features. If you\u0026rsquo;re interested in learning more, here\u0026rsquo;s a list of the supported command line options. The -sw part of the command tells Browsersync to serve your files locally and actively watch for changes that you may be making to the code. Because we didn\u0026rsquo;t install the browser-sync globally we need to use the npx command to run it locally.\n Edit Some HTML The beauty of using a local web server as you develop is that every time you save your changes, the updated version of the website will be immediately shown in the browser window.\nTo demonstrate this, we\u0026rsquo;re about to make a change to the index.html file created earlier. The instant you save the changes you make, you should see the webpage automatically reload to reflect the change. This makes development much easier and faster. Get used to this workflow because it is a standard method for viewing changes as you are making them and it will make the rest of your assignments MUCH easier!\nOpen your index.html file and find the last row of the table that you created earlier. It should look like this:\n1 2 3  \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;?\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;?\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt;   Now look at the table in browser sync.\nYou will see that some of the letters of the alphabet are in Column 0 and others are in Column 1.\nI want you to complete the table, by adding a new row for each remaining letter of the alphabet.\nPlace the remaining letters for subsequent rows in either Column 0 OR Column 1, BUT NOT both. You can place them into columns in whatever way makes some kind of sense to you. Just make sure that there is one letter and one blank cell per row.\nAs you go, save the changes you are making, and watch the webpage instantly reload in the browser and add new rows to your table!\n If you\u0026rsquo;re on Windows, save by pressing Ctrl + S on your keyboard. If you\u0026rsquo;re on a Mac, save by pressing Cmd + S.  Stop the development server You may have noticed that back in Visual Studio Code, the terminal panel still looks something like this:\nThere\u0026rsquo;s no dollar-sign prompt ($), and the terminal won\u0026rsquo;t let you type text into it. This is because Browsersync is still running and is using up that whole terminal. If you ever needed access to a second terminal while Browsersync was running, you could always start up another one with View -\u0026gt; Terminal.\n Visual Studio Code understands that you may need to use multiple terminals at once, and it provides an easy way to switch between them: the small drop-down to the right of the word \u0026ldquo;TERMINAL\u0026rdquo; in the screenshot above. Clicking that drop-down displays a list of all the active terminals running in Visual Studio Code. You can kill, or delete, a terminal with the trash can icon. This immediately terminates whatever process is running in the terminal and shuts that terminal down. Other terminals in Visual Studio Code will be unaffected by this action.\n Whenever you finish working, you may wish to stop the Browsersync development server. One way to do this is by clicking the trash can icon, thereby killing the whole terminal window. Another way is to click back on the terminal that has Browsersync running (see screenshot above) and press the Ctrl + C keys on your keyboard. This should exit Browsersync and return the terminal back to a dollar-sign prompt ($).\n Pressing the Ctrl + C keys while working in a terminal sends a special interrupt (SIGTSTP or \u0026ldquo;terminal stop\u0026rdquo;) to the process currently running on that terminal. That interrupt forces the process to close.\n Submit the assignment If you\u0026rsquo;ve made it to this point, you\u0026rsquo;ve finished a00. The final step is to push the code you created.\nAll assignments in COMP 426 will be submitted by pushing code back to the repository you cloned.\nPush your code  In VSCode, go to the source control tab that you used before. Make sure that all of the changes are committed. Click the little three dot menu a few items away from the check mark. Select \u0026ldquo;Push\u0026rdquo; from the dropdown menu.  THAT\u0026rsquo;S IT! YOU\u0026rsquo;RE DONE WITH THE FIRST ASSIGNMENT!\nThe autograder will do its thing and you should be able to see if your code meets all the requirements by clicking on the Actions tab in your GH repo after you have pushed. The autograder can take a minute or two, so be patient.\nIf your code doesn\u0026rsquo;t pass one of the tests, try to figure out why it didn\u0026rsquo;t pass, fix the error, commit, and push.\nYou can commit and push changes as many times as you need to pass all the tests. This goes for every assignment, not just this one. You always have the option of pushing new changes to autograded assignment repos.\nA note about HTML validation If you copied and pasted the HTML from the above block into index.html, then it will not parse as valid because there are intentional whitespace errors in the example block that you probably missed. It is good practice to run your HTML through a validator. Get into the habit of doing this and learning how to read the output so that you can deal with errors. Familiarize yourself with the W3C validator: https://validator.w3.org, which you can use to validate the HTML for this assignment.\n","description":"This assignment for COMP 426 will help you get through setting up tools and installing some of the basic software you will need to have for the course. It is a walkthrough for installing and setting up your development environment, including: Node.js, VIsual Studio Code, Chrome, git, and using GitHub Classroom for submissions. ","id":1,"section":"a","tags":null,"title":"a00 Setup","uri":"https://comp426.johndmart.in/a/00/"},{"content":"DUE: 2022-01-28T00:00:00-5:00\nGitHub Classroom Assignment Invite: https://classroom.github.com/a/KxHQIQzJ\nIssues: https://github.com/comp426-2022-spring/a01/issues\nNOTE: As of the release of this assignment on 2022-01-20, the autograder is not yet configured. SO, do not worry if there isn\u0026rsquo;t any test output. When it is, GH will run the action and then you will be able to see the output. I will have it configured shortly (i.e., probably on Friday 2022-01-21).\nBuild your own web server from scratch! In this assignment, you will write a script that uses mostly built-in Node.js modules to serve a single web page from a file that you have stored in a www subdirectory next to your server file.\nThe cool thing about this assignment is that it should take about 20 lines of code in toto.\nBut I don\u0026rsquo;t know how to build a web server? Yes. That\u0026rsquo;s right. Or maybe you do already? That\u0026rsquo;s okay, too.\nI didn\u0026rsquo;t used to know how to build a web server either, but then I hacked one together and now I know how to do that.\nThis assignment is an exercise not in programming as much as it is in being able to figure things out based on information that you have complete access to.\nIf you don\u0026rsquo;t know what you\u0026rsquo;re doing, you can\u0026rsquo;t make mistakes. This assignment is an exercise in hacking something together that works. That, it turns out, is how we do most things. You need to get used to taking a deep breath, centering yourself, and then heading into the unknown.\nYou are not doing this assignment so that you can memorize how to do these things, but rather to give yourself confidence that you, in fact, can figure out how to do these things.\nThe instructions below will not give you full directions for every single step or directive, but instead point you to where you can look to find things that will be helpful.\nTry stuff You will also have to try stuff and if it doesn\u0026rsquo;t work, try something else. Read documentation. Read tutorials. Search for things (Stack Overflow is your friend).\nYou can do this.\nI believe in you.\nGet started We\u0026rsquo;ll get started like we always will: with GitHub.\nFollow the link at the top of this page to accept the assignment through GitHub classroom.\nClone your repository Using VSCode GUI or git in the terminal, clone your repo locally.\nYou should see a couple of files, but it should be mostly empty.\nLike this:\n$ ls LICENSE README.md server.js.example Initialize the repo as an NPM package Run npm init following and fill in the prompts accordingly.\nMake sure to do the following:\n Set author to your name. Set main to server.js. Set test to node server.js Set license to match the one identified in the LICENSE file instead of ISC.  To look up the string that you must put to make that change, find the correct identifier at this site: https://spdx.org/licenses/\nWhen you are done with that, your package.json file should look something like this (though yours will be a little different):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  { \u0026#34;name\u0026#34;: \u0026#34;my-own-private-web-server\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.1\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;This package contains a very simple web server that takes one argument for port and then serves index.html in the www directory.\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;server.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;node server.js\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;node server.js\u0026#34; }, \u0026#34;keywords\u0026#34;: [ \u0026#34;web\u0026#34;, \u0026#34;server\u0026#34;, \u0026#34;port\u0026#34;, \u0026#34;node\u0026#34;, \u0026#34;fs\u0026#34;, \u0026#34;args\u0026#34;, \u0026#34;http\u0026#34; ], \u0026#34;author\u0026#34;: \u0026#34;John D. Martin III\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;GPL-3.0-or-later\u0026#34; } }   package.json is just a configuration file, which means that you can always change it later. You do have to be careful when you edit it to ensure that the JSON structure remains intact. See the guides for links to JSON validators that you can use: https://comp426.johndmart.in/guide/validators/#json\nRead through the npm documentation to help you better understand what the init process is doing and what package.json does for you: https://nodejs.dev/learn/an-introduction-to-the-npm-package-manager\nInstall one dependency For this assignment we need to grab one dependency package, minimist. This is going to help us accept arguments from the command line to interact with our web server.\nRun npm install minimist to install the package.\nYou should now see a package-lock.json file and a node_modules subdirectory in your directory as well:\n$ ls node_modules package.json package-lock.json server.js.example Add .gitignore Add a file named .gitignore and put node_modules/ in it:\nnode_modules/ This is going to tell git not to track anything in that directory.\nIf you want a full .gitignore for Node, you can use the text in this file: https://github.com/github/gitignore/blob/main/Node.gitignore\nMake www directory Create a directory (folder) inside your repo directory called www.\nThis is where we are going to store some HTML.\nIn fact, go and grab the index.html file from a00 (the one with the alphabet table) and put it inside your www directory right now.\nWe will use that as the HTML that we are serving from our web server.\nReady, set, go! With that you are all ready to begin actually writing your web server script.\nRead and code Look inside the server.js.example script file.\nIt should look like this:\n// Require http module // Require fs module // Require minimist module (make sure you install this one via npm). // Use minimist to process one argument `--port=` on the command line after `node server.js`. // Define allowed argument name 'port'. // Define a const `port` using the argument from the command line. // Make this const default to port 3000 if there is no argument given for `--port`. // Use the fs module to create an arrow function using `fs.readFile`. // Use the documentation for the Node.js `fs` module. // The function must read a file located at `./www/index.html` and do some stuff with it. // The stuff that should be inside this function is all below. // If there is an error, put it on the console error, return, and exit with error code 1. // Do not be nice about exiting. // Define a const `server` as an arrow function using http.createServer. // Use the documentation for the node.js http module. // The function should have three responses: // 1. status code 200, // 2. set a header with content type `text/html`, and // 3. end with the data that you are reading in from ./www/index.html. // Start the `server` const listening on the port defined by argument in your `port` const. // Put the exact message `Server listening on port ${port}` on the console log. // That's it! You're all done! You should immediately notice that there is no code here; only comments.\nThat is because YOU are going to write all the code.\nI left blank lines based on how many lines are in minimum working example (MWE) I created when designing this assignment, but you can certainly expand beyond that. The blank lines are just there to give you a sense of what it should look like.\nAs noted above, you can do this in 20 lines.\nInstructions The instructions are in the comments, but I will reiterate them below with links to places in the documentation that will guide you in putting this together.\nThe first thing you need to do is either rename or copy server.js.example to server.js so that you can start writing your server script.\nOverview The resources that you will want to lean on most heavily for this assignment are:\nIntroduction to Node.js - Node.js\nJavaScript Tutorial - w3 schools\nEverything you need to know to build this assignment is contained there.\nThe http module The main thing that we are trying to do in this assignment is make Node serve some HTML for us.\nThat\u0026rsquo;s it.\nWe\u0026rsquo;re going to fancy it up a bit, but this is the main event.\nEverything you need to know to be able to do that is here:\nhttps://nodejs.dev/learn/build-an-http-server\nMore granular documentation of the http module is available here:\nhttps://nodejs.dev/learn/the-nodejs-http-module\nSo, start with that.\nGet a very basic web server up and running with the example provided in the link above and then proceed from there.\nThe fs module The next thing that we care about doing is making our web server read from a file and then serve what is in that file instead of just the res.end(Hello, world!)` that our basic web server in the example is doing.\nInstead, you are going to read in the data in ./www/index.html and put that inside res.end instead.\nEverything you need to be able to do that is available here:\nhttps://nodejs.dev/learn/reading-files-with-nodejs\nYou can use either method available in that example, BTW. They do different things, but the end result is the same.\n **HINT: The important bits of your server code (the last two functions in the example) are going to go where console.log(data) is.\n Read the following to better understand what the fs module does, beyond just reading files:\nhttps://nodejs.dev/learn/the-nodejs-fs-module\nError handling Pay special attention to the error handling that is happening in the examples on that page.\n1 2 3 4  if (err) { console.error(err) return }   Look here for a deeper understanding of dealing with errors:\nhttps://nodejs.dev/learn/error-handling-in-nodejs\nYou are also going to want to make Node exit the process if there is no file available or if there is some other error. Like it says in the comments, you don\u0026rsquo;t have to be nice about that. Also, remember, that the exit code for \u0026ldquo;everything is super great\u0026rdquo; is 0 and the exit code for \u0026ldquo;oh no\u0026rdquo; is 1.\nThat\u0026rsquo;s important.\n Do not worry about using process.exit(1) for this assignment since what we really care about here is the error handling itself.\n The minimist module Finally, we want our script to accept a command line argument to set the port number.\nThere are multiple ways to do this, but we are going to use the minimist module so we can make it operate like the -- switches/options that we see in a lot of programs that we run on the command line.\nEverything that you need to be able to do that is here:\nhttps://nodejs.dev/learn/nodejs-accept-arguments-from-the-command-line\n HINT: You will need to use args.port from your args const in order to define a port const, but use a logical OR operator || to give it the option of defaulting to port 3000 in the case that a port number is not supplied when we run the script. You can use the example that is provided in the link above to figure out how to do this. In that example, process.env.PORT is available to grab the port as defined in the system environment and then 3000 is the default. You will define your const similarly. You can also leave process.env.port in there as another option, but make sure that your default is last.\n The laundry list Here is the list of things that we are looking for in your server.js script:\n Require http module. Require fs module. Require minimist module (make sure you install this one via npm). Use minimist to process one argument --port= on the command line after node server.js. Define allowed argument name \u0026lsquo;port\u0026rsquo;. Define a const port using the argument from the command line. Make this const default to port 3000 if there is no argument given for --port. Use the fs module to create an arrow function using fs.readFile. Use the documentation for the Node.js fs module. The function must read a file located at ./www/index.html and do some stuff with it. If there is an error, put it on the console error, and return~~, and exit with error code 1. Do not be nice about exiting~~. Define a const server as an arrow function using http.createServer. Use the documentation for the node.js http module. The function should have three responses:  status code 200, set a header with content type text/html, and end with the data that you are reading in from ./www/index.html.   Start the server const listening on the port defined by argument in your port const. Put the exact message Server listening on port ${port} on the console log.  These are all of the things that are listed in the comments.\nI will do a walkthrough of this assignment either in class or recorded.\nHowever, I would really encourage you to try it and see what you can come up with before we do that together.\nTo reiterate: the purpose of this assignment is not to memorize things, but to learn how to think around a problem and come up with a solution, given a set of constraints.\nIn this case, our constraints are related to doing this task using stuff that is already (mostly) built into Node.\n IMPORTANT: TRACK YOUR CHANGES. As you work through this assignment, once you get one thing to work, and you test it: commit the change with git. Be intentional about this. This will help you revert to a known working state if you break something as you move to your next step.\n ","description":"This assignment for COMP 426 will help you get started working with Node.js and hacking your way through creating a webserver from scratch. This assignment is intended also to hone your skill at reading documentation and engaging in problem-solving.","id":2,"section":"a","tags":null,"title":"a01 Node","uri":"https://comp426.johndmart.in/a/01/"},{"content":"HTML and CSS The first real assignment is meant to get you comfortable with the basics of HTML and CSS. Whether you know it very well already or if you need a refresher, going through this module and then a01 should put you in a good position to continue through the rest of the assignments.\nKnowing these markup languages is very important for being a good web developer. Both HTML and CSS are straightforward and well-documented.\nWeb langauges and platforms and frameworks change very rapidly and you will, as a web developer, spend a career learning new languages and platforms and frameworks. You will constantly be learning and teaching yourself new things. If you take no other lessons away from this class, take this one: get comfortable looking things up and learning things on your own. It is the only way.\nThe list of resources belows, for example, are the kinds of things that you will want to learn how to find online. Google. Everything.\nHTML describes the web page\u0026rsquo;s structure while CSS describes how that structure should be styled. We are going to provide you a short online course so you can familiarize yourself with these two languages. In the second (after the initial setup) assignment we will be making a simple website using just HTML and CSS. Remember all the assignments are already published so you can look ahead and see what kinds of things you will be expected to do.\nIf you find anything overly confusing, ask on Piazza or reach out during office hours. We will be making it very clear what you will be expected to know for a test when it comes time for that. If you can do the upcoming HTML and CSS assignment a01 without looking things up, then you can consider yourself a genius-level expert. If you can complete a01 while referencing the endless trove of documentation available online, then you are like the rest of us and have a pretty decent working knowledge that is good enough to do web development.\nHTML and CSS is probably the most googleable topic you will ever come across in your CS career. Don\u0026rsquo;t be afraid to look things up, but make sure you aren\u0026rsquo;t just copy-pasting things from Stack Overflow either.\nRecommendations for self Study Code Academy CodeAcademy - Learn HTML and CSS\nYou will have to sign up for an account, but it is totally free. You should complete the following tutorials:\nHTML  Elements and Structure Tables (know the basics) Forms (know the basics there will be an assignment on this later) Semantic HTML (optional and not required, just make yourself familiar with it so you can sound smart if you see it at a job)  CSS  Selectors and Visual Rules The Box Model Display and Positioning Colors (optional) Typography (optional) Grid (Skip this and learn basic Flex) CSS Transitions (optional)  w3schools The w3schools site is an excellent resource for the markup and programming languages that we will be using in this course. Get comfortable working through the tutorials both as self-study resource and as a reference tool.\n w3schools HTML w3schools CSS  Mozilla Developer Network (MDN) The Mozilla Developer Network has excellent guides and documentation on all things related to web development.\n MDN HTML MDN CSS.  TutorialsPoint For those of you who just want to read things I\u0026rsquo;d check out TutorialsPoint\u0026rsquo;s pages on HTML and CSS. I don\u0026rsquo;t think the CSS one is very good and you would be better off with the Code Academy one.\nAssessment There is no graded assessment component for course modules. We will not be giving you graded quizzes or anything. However, it will be effectively impossible to successfully work through any aspect of this course going forward without famililarity manipulating, writing, and editing HTML and CSS.\nHere is a list of online quizzes that you can and should take on your own to test and evaluate your knowledge. It would behoove you to take these quizzes and then review things that you find difficult. Practice.\n GeeksforGeeks w3schools HTML Quiz w3schools CSS Quiz ProProfs HTML Quiz with Answers Khan Academy HTML/CSS Recap TutorialsPoint HTML 5 Online Quiz TutorialsPoint CSS Online Quiz CSS Portal CSS Quiz Quizizz HTML and CSS Quiz 1  ","description":"Knowing how to write, edit, and manipulate HTML and CSS is integral to web development. Here are some pointers for refreshing your HTML and CSS skills.","id":3,"section":"module","tags":null,"title":"mod01 HTML + CSS Crash Course","uri":"https://comp426.johndmart.in/module/mod01/"},{"content":"What is it? This is a class about building things that make the web go. We\u0026rsquo;re going to learn how to do that by doing that.\nWhat are we doing? This semester we are going to focus on systems for collecting and managing public health information because we are in an ongoing public health crisis and that seems really relevant.\nCOVID-19 is still a thing We\u0026rsquo;re going to be doing Zoom class for the first few weeks until we see how things are going around campus with COVID-19. None of us want to be in a room with 210 other people all breathing the same air right in the middle of a pretty bad surge of a highly transmissible variant of SARS-COV-2 (Omicron edition).\nAfter we start meeting in-person, I will still host all sessions live on Zoom and record them.\nIf you are sick AT ALL IN ANY WAY, then DO NOT COME TO CLASS.\nLog into Zoom or watch the sessions later instead.\nWhat are we going to learn about? We will learn to use a bunch of Node.js packages and write a bunch of JavaScript. We will learn to build and use RESTful APIs. We will learn to build front-end interfaces using JS, HTML, and CSS to send and retrieve information to and from an API/back-end, respectively. Yes, we will make something with React also.\nWhat are the assignments? There is a series of individual assignments intended to help you develop the skills necessary for working on your final project assignment.\nYou will work in a team on a final project application that deals with public health information, which you will begin planning in the second week of class.\nWhat about grades? Grading will be done on a scale of 1,000,000 points. Literally.\nGrading will also be done by robots. We will give you qualitative feedback, too!\nAre there exams? Yeah, but they are not really like the exams you are used to. The exams assess familiarity with concepts and are really an assessment of my teaching rather than your ability to memorize things.\nWhat will class be like? Sometimes I will talk about conceptual stuff on slides. Sometimes I will do live demos of things related to your assignments.\nHow do we do things? We will use GitHub. We will talk about open source and licensing. We will learn how to work collaboratively.\nCTRL+C CTRL+V? Do your own work (but ask for help when you need it). Do original work (but find things that inspire you and build on them). Don\u0026rsquo;t plagiarize existing work (seriously, don\u0026rsquo;t). Reference things that you find useful. Follow the license terms of any code you adapt and identify where it comes from.\n*sigh* Everything is a lot right now. Will it ever get better? Mental health and general well-being are important. We can\u0026rsquo;t learn anything if we are beset at all sides by stress. We have to tke care of ourselves and each other or we are nowhere.\nBe kind to one another and the instructional staff. The instructional staff will be kind to you and we\u0026rsquo;ll all learn some interesting stuff this semester.\n","description":"There is a lot of information here. Please enjoy this no-bs summary.","id":4,"section":"syllabus","tags":null,"title":"tl;dr","uri":"https://comp426.johndmart.in/syllabus/tldr/"},{"content":"a00 walkthrough + Node.js setup 2022-01-18T15:30:00-05:00\n Installing Node with NVM Setting up SSH key authentication Accepting assignments Cloning a repository Getting started with NPM Write and edit some HTML Using browser-sync Write and edit some HTML Ports for testing Adding, committing, and pushing your changes Troubleshooting the output from autograders on GitHub  Notes Installing NVM If you install NVM using the supremely straightforward instructions linked below, don\u0026rsquo;t make the mistake of over-thinking it the way that your instructor did today.\nThe only reason that it did not work was that I needed to exit and reload the terminal OR I could have run source ~/.bashrc and it would have reloaded my path so that the nvm command would run properly. I just didn\u0026rsquo;t read the next set of instructions about doing exactly that.\nSo, learn from my mistakes.\nI\u0026rsquo;ll demo NVM on Thursday and we can troubleshoot a version mismatch issue.\nPorts Similarly, the issue that I had displaying a test page served by browser-sync would have been easily dealt with if I had thought about it for a minute.\nWhen I set the firewall up initially, it was to serve only to requests coming from high-number ports from a specific address (the address in my home) and I forgot about that immediately after doing it, of course. So that is fixed now and we\u0026rsquo;ll be able to proceed with demos.\nIf you are interested in learning more about what ports do for us, see the link below.\nAlso, if you are interested in learning to set up a remote server for running things like this, I can post a tutorial. It is relatively easy and nice to have some experience working on remote servers.\nUseful links a00 instructions\nInstalling Node with NVM\nhttps://code.visualstudio.com/docs/editor/github\nAdding a new SSH key to your GitHub account\nThe W3C Markup Validation Service\nHTML \u0026lt;th\u0026gt; scope Attribute\nService Name and Transport Protocol Port Number Registry - IANA\nTCP/IP Ports and Sockets Explained - Steve\u0026rsquo;s Internet Guide\nWhat is a computer port? | Ports in networking - Cloudflare\nRunning JS with Node 2022-01-18T15:30:00-05:00\n Running JS in a command terminal Structuring an NPM package Node console.log() Scripting and dependencies const Arrow functions  Slides https://comp426-2022-spring.github.io/slides/w01-01.html\nUseful links Introduction to Node.js - Node.js\nJavaScript Tutorial - w3 schools\nJavaScript Variables – A Beginner\u0026rsquo;s Guide to var, const, and let - Madison Kenna\nArrow functions for beginners - Brandon Morelli\nNotes In class today, I was trying to set environment variables so that we could see what happened when we used one instead of letting the basic webserver use its default, but setenv wasn\u0026rsquo;t working.\nThis is because setenv doesn\u0026rsquo;t belong to bash. It belongs to a different shell. I was recently working on a system using tcsh instead of bash and those commands got stuck in my head.\nThe correct commands for setting (and viewing) an environment variable called PORT are below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  # `export` will set an environment varialble export PORT=5000 # If set, the following should give you the value saved in the variable: echo $PORT # To see an environmental variable you can call `env` and pipe it through `grep` env | grep PORT # `env` without any options will put ALL environment variables into STDOUT. env # `env` will set a variable similarly to `export` above and then put all environment variables into STDOUT env PORT=5000 # You can un-set a variable with `env` as well env -u PORT env --unset PORT   ","description":"This week we will introduce Node.js and learn about package management with NPM, creating Node packages, and generally working with packages in git repos.","id":5,"section":"w","tags":null,"title":"w01 Node","uri":"https://comp426.johndmart.in/w/01/"},{"content":"DUE: 2022-02-11T00:00:00-5:00\nGitHub Classroom Assignment Invite: https://classroom.github.com/a/4U2bhooL\nIssues: https://github.com/comp426-2022-spring/a02/issues\nNOTE: As of 2022-02-03, the autograder for this assignment is not fullly configured. It will tell you this when you push. Give the staff a couple of days to finish configuring it. You don\u0026rsquo;t have to do anything other than push to your assignment repo. When the grader is ready, it will update and spit out feedback.\nWrite some functions and make a module in Node.js In this assignment, you are going to write some functions that emulate a simple random coin flip and then do things with the resulting information. The focus of the assignment is not necessarily on the coin flipping, but on how to work with functions to manipulate information into usable formats.\nThe instructions for this are very sparse because I want you to be creative in how you approach this. There are a few things that you will have to do very specifically in order to make this work, but beyond that, HOW you do this is really up to you.\nSet up your environment As usual, we\u0026rsquo;re starting with a kind of empty repository.\nI\u0026rsquo;ve given you a LICENSE file, a README, and a script called flip.js.\nI have also given you a directory modules with one file in it.\nRun npm init to initialize your repository as a Node package.\nFill in the information as usual and make sure that the license matches the one in the repository.\nOnce you have done that, you should have a package.json file that looks something like this:\n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;name\u0026#34;: \u0026#34;coinflip\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.1\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;This is a simple package that emulates coin flips in several different ways.\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;flip.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;John D. Martin III\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;GPL-3.0-or-later\u0026#34; }   Because of some peculiarities in the way that Node handles modules, exports, and imports, we need to add a line to package.json to make it work. So, let\u0026rsquo;s do that right now.\nAdd \u0026quot;type\u0026quot;: \u0026quot;module\u0026quot; somewhere. It doesn\u0026rsquo;t matter where: just make sure that you keep the JSON syntax intact (mind the commas).\nAfter that, we want to add a few scripts, because you are going to be creating several script files. This way we can use NPM to invoke them if we want.\nAdd the following under \u0026quot;scripts\u0026quot;: {:\n \u0026quot;flip\u0026quot;: \u0026quot;node flip.js\u0026quot;, \u0026quot;flips\u0026quot;: \u0026quot;node flips.js\u0026quot;, \u0026quot;guess-flip\u0026quot;: \u0026quot;node guess-flip.js\u0026quot;, You can edit the test script line later if you want to develop a test for your scripts (you should do this).\nYour file should now look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;name\u0026#34;: \u0026#34;coinflip\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.1\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;This is a simple package that emulates coin flips in several different ways.\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;flip.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;flip\u0026#34;: \u0026#34;node flip.js\u0026#34;, \u0026#34;flips\u0026#34;: \u0026#34;node flips.js\u0026#34;, \u0026#34;guess\u0026#34;: \u0026#34;node guess-flip.js\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;John D. Martin III\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;GPL-3.0-or-later\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34; }   Write some functions Open up ./modules/coin.mjs\n This file has the .mjs extension to identify it as a module, but it could also just be .js. Both work in this case. You just have to make sure when you are referring to a module file that your reference matches the actual name of the file. See this for more information about module extensions: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#aside_%E2%80%94_.mjs_versus_.js\n Inside, you should see some named functions and some comments with instructions. Your task is to follow the instructions and fill in the function definitions with expressions/statements that take the specified parameters and return the speficied returns.\nYou will also need to export all of the functions in that file. There are several ways to do this. See the following and choose a method: https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export\nWrite a script I\u0026rsquo;ve given you a template for one script. It is pretty straightforward.\nWhen you run node flip.js, in a terminal, you should see either \u0026ldquo;heads\u0026rdquo; or \u0026ldquo;tails\u0026rdquo; in STDOUT.\nSo, how do we do that?\nFirst, we have to import one of the functions that we just wrote.\nAgain, there are a number of ways to do this, so start here and identify one that will work for you: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\nOnce your function is imported, use console.log() to get the returned output from your coinFlip() function into STDOUT.\nEt voila!\nTest your script Since we set npm up to be able to run our script, you should be able to run npm flip and see the output in STDOUT as either \u0026ldquo;heads\u0026rdquo; or \u0026ldquo;tails.\u0026rdquo;\nWrite some more scripts To complete the assignment, you will need two more scripts, detailed below:\nFlip many coins Create another script file called flips.js.\nThis script should do the following:\n Take one argument on the command line named --number. If no argument is given, it should flip once by default. The result on STDOUT should be an array of all of the flips in sequence followed by an object summarizing the flips.  So the script should run like this and have similar output\n$ node flips.js --number=10 [ 'heads', 'heads', 'heads', 'tails', 'heads', 'tails', 'tails', 'heads', 'tails', 'heads' ] { tails: 5, heads: 5 } Try your luck Create one more script called guess-flip.js.\nThis script should do the following:\n Take one argument on the command line named --call that will only accept . If no argument is given, or something other than \u0026ldquo;heads\u0026rdquo; or \u0026ldquo;tails\u0026rdquo; is passed with --call, return an error message (see below for example). Compare the call with a flip and report the result to STDOUT (see below)  The script should run like this and have similar output.\n$ node guess-flip.js Error: no input. Usage: node guess-flip --call=[heads|tails] $ node guess-flip.js --call=tails { call: 'tails', flip: 'heads', result: 'lose' } $ node guess-flip.js --call=tails { call: 'tails', flip: 'tails', result: 'win' } Laundry list This is what you should have upon completing the assignment:\n A repo set up as a Node package that can handle a module and has three npm helper scripts defined for your scripts. A module file in ./modules/ that has several functions that emulate coin flips. Three script files that do the following:  flip.js - flips a coin into STDOUT flips.js - flips a bunch of coins into STDOUT based on a number input as a command line argument guess-flip.js - takes an argument calling a coin flip and then testing it against a flip and puts the results into STDOUT    Good luck!\nPS You may run into some errors related to using both ESM and CommonJS methods for importing/requiring dependencies. Check out the links from w03 for help working through those errors.\n","description":"This assignment for COMP 426 is intended to give you a sense of how to work with modules and functions in Node packages (and otherwise). This assignment is, as ever, an exercise in finding, reading, interpreting, and applying documentation.","id":6,"section":"a","tags":null,"title":"a02 Functions and modules","uri":"https://comp426.johndmart.in/a/02/"},{"content":"Technical skills Working through this course facliltates students to exercise a range of skils:\n Design and build RESTful API endpoints for access to a server-side information source (database, third-party API, etc.) Design objects using the JavaScript prototype-based object model Employ functional programming techniques implemented in JavaScript for asynchronous event-handling Use asynchronous techniques to implement client-server interactions with a RESTful API Manipulate the Document Oject Model (DOM) using a variety of techniques for presenting information client-side Construct client-side/browesr-based interactive applications/interfaces Use CSS and HTML for basic aesthetics in interface design  Planning and management skills In addition to the above, students will be able to:\n Manage source code using git and GitHub Basic package structure using Node.js Jump-start prototyping with JS libraries like React, Next.js, and Express and CSS frameworks like Bulma and Bootstrap Plan and manage projects while collaborating with a team Ask design questions for basic interaction flows  ","description":"Working through this course should give students a range of skils related to building and implementing web back-end and front-end applications as well competency in collaborative development and project management.","id":7,"section":"syllabus","tags":null,"title":"Course objectives","uri":"https://comp426.johndmart.in/syllabus/objectives/"},{"content":"Headers, requests, responses, status, and curl 2022-01-25T15:30:00-05:00\n Pearl Hacks What do headers do? How can we see them?  curl Inspector   Requests and responses What do statuses tell us?  Slides https://comp426-2022-spring.github.io/slides/w02-00.html\nPearl Hacks We will have a brief presentation from a member of the planning committee for Pearl Hacks, a beginner-friendly hackathon for women and non-binady students.\nPlease see the Pearl Hacks site for more information about the program: https://pearlhacks.com/index.html\nUseful links curl exercises - Julia Evans\ncurl documentation\nDisplaying request headers with curl - Baeldung\nHTTP status codes - REST API Tutorial\nMDN Web Docs HTTP headers\nHTTP response status codes\nNotes Scripting and Testing 2022-01-27T15:30:00-05:00\n Thinking: developing v. programming v. coding Designing tests npmnpm helper scripts helper scripts How to know what you are looking for WTF is the autograder and how does it work?  Slides https://comp426-2022-spring.github.io/slides/w02-01.html\nOptional (but highty encouraged) reading Conceptual Blockbusting: A Guide to Better Ideas, Fifth Edition - James L. Adams (Basic Books, 2019 [First edition, 1974])\nUseful links Programming VS Coding VS Development – What\u0026rsquo;s the Difference? - Kingsley Ubah\nTesting npm-test - npm Docs\nNode.js Unit Testing: Get Started Quickly With Examples - Testim (This tutorial uses Jest)\nUnit Testing of Node.js Application - GeeksforGeeks\n","description":"This week we will discuss the anatomy of HTTP headers and requests. We will also start talking about functions in preparation for a02.","id":8,"section":"w","tags":null,"title":"w02 HTTP, Scripting, and Testing","uri":"https://comp426.johndmart.in/w/02/"},{"content":"DUE: 2022-02-25T00:00:00-5:00\nGitHub Classroom Assignment Invite: https://classroom.github.com/a/cyXk13b7\nIssues: https://github.com/comp426-2022-spring/a03/issues\nCreating a API In this assignment, you are going to convert the functions that you wrote for a02 to emulate a simple random coin flip and then do things with the resulting information. The focus of the assignment is not necessarily on creating basic API endpoints in Node using Express.js.\nThe instructions for this are very sparse because I want you to be creative in how you approach this. There are a only a few things that you will have to do very specifically in order to make this work, but beyond that, HOW you do this is really up to you.\nList of requirements for submission  server.js file that takes an arbitrary port number as a command line argument (i.e. I should be able to run it with node server.js. The port should default to 5000 if no argument is given. Default API endpoint that returns 404 Not found for any endpoints that are not defined. Check endpoint at /app/ that returns 200 OK. Endpoint /app/flip/ that returns JSON {\u0026quot;flip\u0026quot;:\u0026quot;heads\u0026quot;} or {\u0026quot;flip\u0026quot;:\u0026quot;tails\u0026quot;} corresponding to the results of the random coin flip. Endpoint /app/flips/:number that returns JSON including an array of the raw random flips and a summary. Example below. Endpoint /app/flip/call/heads that returns the result of a random flip match against heads as JSON. Endpoint /app/flip/call/tails that returns the result of a random flip match against tails as JSON. ALL endpoints should return HTTP headers including a status code and the appropriate content type for the response. All of this should be in a Node package with \u0026quot;main\u0026quot; set to server.js. The test script defined in package.json should be set to \u0026quot;node server.js --port=5555\u0026quot;  Examples If I run the following curl commands against your API, I should see output corresponding to what is shown here in STDOUT.\nPLEASE USE CURL to test your endpoints as below RATHER THAN relying on the autograder to tell you what is wrong. You must become accustomed to testing your own scripts.\n$ curl http://localhost:5000/app/ 200 OK $ curl -I http://localhost:5000/app/ i=HTTP/1.1 200 OK X-Powered-By: Express Content-Type: text/plain Date: Tue, 15 Feb 2022 18:02:32 GMT Connection: keep-alive Keep-Alive: timeout=5 $ curl http://localhost:5000/app/flip/ {\u0026quot;flip\u0026quot;:\u0026quot;tails\u0026quot;} $ curl -I http://localhost:5000/app/ HTTP/1.1 200 OK X-Powered-By: Express Content-Type: text/json; charset=utf-8 Content-Length: 16 ETag: W/\u0026quot;10-VYm8Bk1/RW8RGhDXdTwBYk6lbGE\u0026quot; Date: Tue, 15 Feb 2022 18:06:17 GMT Connection: keep-alive Keep-Alive: timeout=5 $ curl http://localhost:5000/app/flips/20 {\u0026quot;raw\u0026quot;:[\u0026quot;tails\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;heads\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;heads\u0026quot;,\u0026quot;heads\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;heads\u0026quot;,\u0026quot;heads\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;heads\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;heads\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;heads\u0026quot;,\u0026quot;tails\u0026quot;,\u0026quot;heads\u0026quot;],\u0026quot;summary\u0026quot;:{\u0026quot;tails\u0026quot;:11,\u0026quot;heads\u0026quot;:9}} $ curl http://localhost:5000/app/flip/call/heads {\u0026quot;call\u0026quot;:\u0026quot;heads\u0026quot;,\u0026quot;flip\u0026quot;:\u0026quot;heads\u0026quot;,\u0026quot;result\u0026quot;:\u0026quot;win\u0026quot;} $ curl http://localhost:5000/app/flip/call/tails {\u0026quot;call\u0026quot;:\u0026quot;tails\u0026quot;,\u0026quot;flip\u0026quot;:\u0026quot;heads\u0026quot;,\u0026quot;result\u0026quot;:\u0026quot;lose\u0026quot;} $ curl http://localhost:5000/app/some/nonexistent/endpoint/ 404 NOT FOUND Set up your environment You will need to run npm init like usual and make sure that you make changes according to the list above.\nOnce you have initialized your repo as a Node package, you need to install express. If you are using minimist or yargs or some other package to handle command line arguments, then you need to also install that, e.g.:\n$ npm install express minimist Require dependencies Once you have initialized your repository, you will need to create your script file, server.js and add a few things to get going with express. The first is requiring whatever dependencies you need (including express).\n1 2 3  // Require Express.js const express = require(\u0026#39;express\u0026#39;) const app = express()   Start app server Replace \u0026ldquo;HTTP_PORT\u0026rdquo; below with whatever you are using as your port variable. Alternatively, assign \u0026ldquo;HTTP_PORT\u0026rdquo; as your port variable.\n1 2 3 4  // Start an app server const server = app.listen(HTTP_PORT, () =\u0026gt; { console.log(\u0026#39;App listening on port %PORT%\u0026#39;.replace(\u0026#39;%PORT%\u0026#39;,HTTP_PORT)) });   Define default endpoint 1 2 3 4  // Default response for any other request app.use(function(req, res){ res.status(404).send(\u0026#39;404 NOT FOUND\u0026#39;) });   Define check endpoint app.get('/app/', (req, res) =\u0026gt; { // Respond with status 200 res.statusCode = 200; // Respond with status message \u0026quot;OK\u0026quot; res.statusMessage = 'OK'; res.writeHead( res.statusCode, { 'Content-Type' : 'text/plain' }); res.end(res.statusCode+ ' ' +res.statusMessage) }); Note the similarities and differences between the above default and check endpoints.\nFill in the blank lines after the comments. in the check endpoint.\nResponse and request You should note that any variable inside your endpoint definitions that have res are properties of the response object from Express (which is an extension of Node\u0026rsquo;s http.ServerResponse class. You can use response properties from that as well. Much of what Express does is redefine them to be shorter and chainable as in the case of the status code examples above.\nSome other response properties you can use are:\n res.json() responds with whatever JSON is contained within it. res.send() responds in plaintext with any message contained therein. res.setHeader() sets one of the HTTP header parameters, like Content-Type.  The full documentation for Express\u0026rsquo;s response object is here: https://expressjs.com/en/5x/api.html#res\nThe request object is also available and you can treat these just like any variable.\nFor this assignment you will specifically need req.params to get the number from the URL for your multiple flips endpoint.\nThat endpoint definition will look like this:\napp.get('/app/flips/:number', (req, res) =\u0026gt; { //Some //expressions //go //here }); In the endpoint definition where you see :number, the colon makes that part of the definition into a parameter, which is variable. In this case, you will be using a number.\nYou can get this parameter by referring to req.params.number.\nYou can use whatever you want for this definition. The names of parameters are arbitrary.\nIn this case, you might use something like this to pass that parameter to your coin-flipping function.\napp.get('/app/flips/:number', (req, res) =\u0026gt; { const flips = manyflips(req.params.number) //Other //expressions //go //here }); In the example above, req.params.number can be passed to whatever function we are using to generate a bunch of coin flips.\nThe full documentation for Express\u0026rsquo;s request object is here: https://expressjs.com/en/5x/api.html#req\nFunctions You should already have a bunch of coin flip functions from a02 that you can adapt to use in this server script.\nYou can put them in however you like. You can include them in the server file itself. You can make them into a module. Whatever works for you is fine as long as the endpoints return the appropriate output.\nGood luck! We will be going over parts of this assignment and expanding upon them over the next few weeks in class, so if you are having trouble getting something to work: don\u0026rsquo;t worry. We will likely cover in class at some point soon.\nAlso, be sure to refer to what you have done in previous assignments. These assignments build on one another, so try to carry things over, when appropriate, as you are looking for solutions.\n","description":"This assignment for COMP 426 is intended to help you work through creating an API using Node.js and Express.js. This assignment is, as ever, an exercise in finding, reading, interpreting, and applying documentation.","id":9,"section":"a","tags":null,"title":"a03 Make an API","uri":"https://comp426.johndmart.in/a/03/"},{"content":"Class sessions We will combine demonstrations and lectures with hand-on work in class. Some class time will be reserved for you to work with your teams.\nRemote availability Class sessions are all going to be available to stream live on Zoom. This is intended to help manage dealing with the uncertainty of conditions this semester.\nSession recordings Sessions will all be recorded and archived in Panopto so that you can access them later.\nResources Readings Resources for conceptual information and technical documentation will all be linked from the session pages on the course site. You are not expected to buy any books or other resources for this course. All assigned resources will be open educational resources or otherwise available online.\nSoftware All of the software required for this course is freely available for distribution online and open source. You are not expected to purchase licenses for any software required for this course.\nAttendance and participation Attendance in class sessions is expected but does not have to always be in-person. There will be interactive components in the class sessions and you will need to interact with other students. These things can be done remotely in some cases.\nWe will not be taking attendance but trust that you will make every effort to attend class sessions and engage with the class. It is to your benefit to do so.\n","description":"Class sessions will be hyflex even when we are running in-person and will combine conceptual discussions and demos. All resources will be made available through the course website. Attendance is expected, but does not have to be in-person all the time. We will be very flexible with how you engage with the class due to COVID-19.","id":10,"section":"syllabus","tags":null,"title":"Course structure","uri":"https://comp426.johndmart.in/syllabus/structure/"},{"content":"In a03, we\u0026rsquo;re writing some basic JS functions that can be called to return values outside of a web browser. This module includes some information and links about JS functions and a walkthrough of creating a very basic set. Some of this is covered in the a03 instructions as well. You can use this as a reference to expand on the information presented in the instructions.\nHow do functions work in JavaScript? Functions in JS work prettymuch the way that functions in any langauge work. You are defining something that can be invoked to do a specific set of tasks so that you do not have to write instructions for those tasks over and over again.\n One weird trick: if you find yourself doing something more than once, then you should probably rwrite a function instead of doing that thing over and over again.\n Functions have a very straightforward definition syntax comprising a few parts:\n name, which invokes the function; parameters, which define local variables as arguments when the function is invoked; and code that gets executed by the function.  If we want to get some sort of information out of our function, then we will need our code to include a return, which is all the stuff that you expect the function to spit out so you can do something else with it.\nBasic function definition syntax looks like this:\n1 2 3 4  function name(parameter1, parameter2) { // some code \treturn parameter1 + parameter2; }   As you can see, you can use // to comment single lines in your code inside a function. You can also comment multiple lines by using */ and /* to wrap whatever you want to comment between them. These work across the board in JS and you should be using them in order to leave information for your self. There are tons of examples of comments in a03.\nExport / Import In addition to writing basic functions, we want to be able to olexport them so that we can call them in other places. This requires just a simple modification to the basic syntax listed above:\n1 2 3 4  export function name(parameter1, parameter2) { // some code \treturn parameter1 + parameter2; }   Lets\u0026rsquo;s say we have the above code saved in a file called exports.js.\nTo import the same function, you would need the following in another file, we\u0026rsquo;ll call it main.js. We\u0026rsquo;ll also add an invocation of the function.\n1 2 3  import {name} from \u0026#34;./exports.js\u0026#34;; name(5,6);   In order to get the above to spit out the return value in the terminal, we need to wrap the call in the above block of code with a console.log() function.\n1 2 3  import {name} from \u0026#34;./exports.js\u0026#34;; console.log(name(5,6));   That should spit out 11 if we were to run main.js in a terminal with node.\nHello, world. In this section, we will do a pretty basic walkthrough for creating, exporting, and importing a \u0026ldquo;Hello, world\u0026rdquo; function. This example will sort of mirror what you are doing in a03.\nGet set up First, open a terminal and create a new directory.\n$ mkdir helloworld Then, let\u0026rsquo;s create some files to get ourselves started.\n$ cd helloworld $ touch helloworld.js $ touch functions.js Then lets initialize our directory as an npm package. You can just accept the defaults suggested by npm.\n$ *npm* init In order to run this, we\u0026rsquo;ll need some help from the ESM package, so let\u0026rsquo;s go ahead and install that now.\n$ *npm* install esm  Normally when you want to run a .js file you just use the command line and call node FileName.js. But because the es6 import and export syntax is experimental in node, we need to use a package called ESM. For us, the user, the only difference is that we now run our node command as follows: node -r esm FileName.js. ESM will not be required in later versions of node.\n Write some code! Now we can open helloworld.js and we\u0026rsquo;ll put the following code in it.\n1 2 3  export function helloWorld(message) { return `Hello, world ${message}` }   Save that script and let\u0026rsquo;s think about what we just did for a minute.\nIn the above script we are defining a function helloWorld() and exporting it so that we can import it and then invoke it elsewhere. It has one parameter, which we have defined as message. Whatever value we insert as the message is going to get returned after the words \u0026ldquo;Hello, world\u0026rdquo;. If you leave the function empty, it will just return \u0026ldquo;Hello, world.\u0026rdquo;\nSo if we want to say \u0026ldquo;Hello, world and exit\u0026rdquo;, then we would call `helloWorld(\u0026lsquo;and exit\u0026rsquo;). There are other ways to do this. The code you see above is one example of how to do this. You may find other examples that work and that is fine.\nNow we need to import our function and call it.\nOpen the main.js file that we created earlier. Put the following in it.\n1 2 3  import {helloWorld} from \u0026#34;./helloworld\u0026#34;; console.log(helloWorld(\u0026#39;and exit\u0026#39;));   Now, what are we doing here?\nWe are importing our previously defined and exported function helloWorld from the helloworld.js script we created earlier. We are using a path relative to our current working directory: ./ means \u0026ldquo;this directory.\u0026rdquo; Since helloworld.js is stored in the same directory, ./helloworld.js means \u0026ldquo;the hello_world.js script stored in this directory.\u0026rdquo; You\u0026rsquo;ll notice that you don\u0026rsquo;t have to put the file extension in the script. Node will assume that we are asking for a JS file.\nNext, we are invoking our function helloWorld(). If we just invoke that on its own, it will not output anything in the terminal. To get it to do that, we need to wrap the function call in console.log().\nSave that file and we\u0026rsquo;ll see if it works!\nRun it! Alright, we\u0026rsquo;ve written some scripts and we have our directory set up with npm. We should be ready to run this and see if it works.\nTo run your script, run the first line in the example below and you should see the output on the second line:\n$ node -r esm main.js Hello world, and exit. You can also have Node run this interactively so that you can change what the function is saying.\nRun:\nnode -i -r esm \u0026gt; The \u0026gt; means that we are in an interactive node session and it is expecting us to type something. So lets type some stuff. Let\u0026rsquo;s import our function (HINT: we do the same thing that we did in the file, but just live on the command line).\n\u0026gt; import {helloWorld} from './helloworld.js' undefined \u0026gt; Don\u0026rsquo;t worry about the \u0026ldquo;undefined\u0026rdquo; thing. It\u0026rsquo;s misleading. It is saying that here was no console output defined, so it echoes \u0026ldquo;undefined.\u0026rdquo;\nWe can turn this off, but for now we\u0026rsquo;re not going to worry about it.\nNext let\u0026rsquo;s see what happens if we continue with our interactive Node session and call our helloWorld() function with different arguments.\n\u0026gt; import {helloWorld} from './helloworld.js' undefined \u0026gt; helloWorld() 'Hello, world undefined' \u0026gt; helloWorld('') 'Hello, world ' \u0026gt; helloWorld('.') 'Hello, world .' \u0026gt; helloWorld('and exit.') 'Hello, world and exit.' \u0026gt; Press CTRL+C twice or type .exit to exit the Node interactive session.\nAnd that\u0026rsquo;s it! We did it! We defined a function, exported it, imported it, and made it do things!\nnpm test If you open up package.json you will notice that there is a field for a test.\nWe left this undefined earlier, but let\u0026rsquo;s define it so that we have another way of running a test of our function.\nLet\u0026rsquo;s put the command that we used to run our main.js file in that field as a test.\nTo do this, make your package.js file look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;name\u0026#34;: \u0026#34;helloworld\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;main.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;node -r esm main.js\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;esm\u0026#34;: \u0026#34;^3.2.25\u0026#34; } }   Now, we can run the following in the terminal and it will run the command we set as a test and should generate output that looks like the example below.\n$ npm test \u0026gt; helloworld@1.0.0 test \u0026gt; node -r esm main.js Hello, world and exit. This all feeds directly into a03, which will have you defining a bunch of functions that do different things.\n","description":"Get started writing and calling basic functions in JavaScript.","id":11,"section":"module","tags":null,"title":"mod03 JavaScript Functions","uri":"https://comp426.johndmart.in/module/mod03/"},{"content":"Functions and Evolution 2022-01-27T15:30:00-05:00\n Old-school JS and modern JS History and evolution Functions three ways  Slides https://comp426-2022-spring.github.io/slides/w03-00.html\nUseful links Evolution JavaScript History - w3schools\nDifference between ES5 and ES6 - GeeksforGeeks\nDifference between ES6 and TypeScript\nDifference between JavaScript and TypeScript\nFunctions Functions - MDN Web Docs\nJavaScript Functions\nJavascript Intro to Functions - Learn.co\nJavaScript Functions - JavaScript Tutorial\nFunctions - learn-js.org\nJavaScript Function Definitions\nES6 arrow functions Javascript Arrow Function\nArrow functions for beginners - Brandon Morelli\nArrow functions vs regular functions in JavaScript - Madhavan Nagarajan\nWhen (and why) you should use ES6 arrow functions — and when you shouldn\u0026rsquo;t - Cynthia Lee\nTypeScript functions The TypeScript Handbook\nIntroduction to TypeScript - GeeksforGeeks\nMore on Functions - TypeScript\nNotes History JavaScript was invented in 1995 by Brendan Eich.\nIn 1996, it was developed into a standard scripting langage by ECMA\u0026rsquo;s (then the European Computer Manufacturers Association) Technical Committe (TC39) and released as ECMAScript 1 (ES1) in 1997.\nTypeScript was developed and released by MicroSoft in 2012 to deal with some of the deficits of JS as a programming language.\nIt is technically a superset of ES6 (which is a superset of ES5).\nThe current release of TypeScript (TS4.5) incorporates ES2022 modules and is supported by Node.js 16.x.x.\nSemicolons It turns out that the seemingly arbitrary and undisciplined way I use semicolons is\u0026hellip; fine I guess?\nI have always just used them intuitively based on what I thought was happening and I realize now that my usage was a vestige of writing bash scripts, where they have somewhat more explicit use as a command terminator. So when I would write one-liners, this was the mechanism that I used to put the lines together into one.\nApparently some people get mad about semicolons in JS.\nThis is a good discussion of what semicolons are doing in JS and where the parser inserts them automatically and why: https://www.freecodecamp.org/news/lets-talk-about-semicolons-in-javascript-f1fe08ab4e53/\nSo, my advice is to use them if you feel like it and if you ever encounter someone who gets super upset about them, then avoid that person.\nThis Regular functions bind their own scope whereas arrow functions inherit from the parent scope.\nWhat does this mean?\nIt means that arrow functions are limited in terms of what they can and can\u0026rsquo;t do:\n No binding to this Can\u0026rsquo;t use as methods or constructors No good for bind(), call(), and apply() No good for anything that rely on a scope  But they can be used with closures and are nice for when we are creating API endpoints, which we will do next week.\nModules and export 2022-02-01T15:30:00-05:00\nSlides https://comp426-2022-spring.github.io/slides/w03-01.html\nUseful links Modules, export, and import Export and Import - JavaScript.info\nThe module object - Node.js\nNode.js export module - GeeksforGeeks\nNode Module Exports Explained – With JavaScript Export Function Examples - Stanley Nguyen\nMDN links JavaScript Modules\nExport\nImport\nESM and CommonJS issues You\u0026rsquo;re going to run into issues related to using the module, export, import.\nBasically, you can\u0026rsquo;t use require('blahblah') with ESM modules and you can't use import` with CJS modules.\nBUT THAT IS OKAY!\nBecause there is a way to make it happen.\nModule API module.createRequire() - Node.js\nParsing command line arguments How to parse command line arguments - Node.js\nCommand Line Arguments in Node.js - Scott Robinson\nHow to Parse Command Line Arguments in Node.js - Rahul Kumar\n","description":"This week we will discuss and demo writing functions to simplify repeated or recurring rasks. We will also discuss creating modules to contain multiple functions and operate as packages that we can port from project to project.","id":12,"section":"w","tags":null,"title":"w03 Functions and Modules","uri":"https://comp426.johndmart.in/w/03/"},{"content":"Collaborative workflows 2022-02-08T15:30:00-05:00\nToday we are mostly going to spend class time orienting ourselves within a99 teams and beginning a brainstorming session with your team.\nAt the beginning of today\u0026rsquo;s session, I will go over the tools that I want you to use in GitHub to get yourselves into a collaborative workflow habit.\nUseful links Collaborating with your team - GitHub Docs\nGitHub projects Using project boards for task management - lecoursen (GitHub support community)\nAbout project boards - GitHub Docs\nPull requests How to create a pull request in GitHub - Kedar Vijay Kulkarni\nHow to make your first pull request on GitHub - Thanoshan MV\nAbout pull requests - GitHub Docs\nNotes If you have not been assigned to a team or your team is not able to contact one of the members thereof, please file an issue on the general-info repo and we will look into it: https://github.com/comp426-2022-spring/general-info/issues\nAPI Overview 2022-02-10T15:30:00-5:00\nAgenda  REST API Why REST? Constraints Resources Methods  Slides https://comp426-2022-spring.github.io/slides/w04-01.html\nUseful links Chapter 5: Representational State Transfer (REST) from Architectural Styles and the Design of Network-based Software Architectures - Roy Fielding\nWhat is REST? - REST API Tutorial\nDifference between URL and URI - GeeksforGeeks\nNot All Microservices Need to Be REST — 3 Alternatives to the Classic - Fernando Doglio\nURLEncoder\njson url-encoder - Online JSON Tools\n","description":"A conceptual overview of APIs.","id":13,"section":"w","tags":null,"title":"w04 Collaborative workflows and APIs","uri":"https://comp426.johndmart.in/w/04/"},{"content":"DUE: 2022-03-29T00:00:00-5:00\nGitHub Classroom Assignment Invite: https://classroom.github.com/a/GQsrzvZT\nIssues: https://github.com/comp426-2022-spring/a04/issues\nLogging transactions and handling errors This assignment for COMP 426 will help you to create and connect a database and to record access logs and test errors for your API server from a03 with some middleware. This is an important piece of building an API, because it allows you to break down what happened if something goes wrong. It also helps other developers use and deploy your software.\nYou should start with your server.js script from a03.\nDocumentation The below code block should serve in part as a guide for this assignement.\nIf your server.js script is run with the option --help, it should echo ONLY the following help message to STDOUT and then exit 0.\n Note that if you try to test this using npx nodemon server.js --help it will display nodemon\u0026rsquo;s help message. Also, in order for this to work properly, the conditional has to come before all of the dependencies in your script, with the exception of whatever library you are using to parse command line arguments (minimist, yargs, etc.).\n server.js [options] --por\tSet the port number for the server to listen on. Must be an integer between 1 and 65535. --debug\tIf set to true, creates endlpoints /app/log/access/ which returns a JSON access log from the database and /app/error which throws an error with the message \u0026quot;Error test successful.\u0026quot; Defaults to false. --log\tIf set to false, no log files are written. Defaults to true. Logs are always written to database. --help\tReturn this message and exit. As you can see, you will need to include multiple command line options with defaults.\n TIP: You can store help text in a variable spanning multiple lines by wrapping in with backticks.\n If you are using minimist, to do this, look at the documentation to see how arguments are stored in the argv object that minimist gives you: https://github.com/substack/minimist\n TIP: If you use minimist in the way that we have done in the past to process command line arguments (see below), you can see what it is storing in the object that we create from it by dumping into console log. This gives you access in real time for debugging.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  // Require minimist module const args = require(\u0026#39;minimist\u0026#39;)(process.argv.slice(2)) // See what is stored in the object produced by minimist console.log(args) // Store help text const help = (` server.js [options] --port\tSet the port number for the server to listen on. Must be an integer between 1 and 65535. --debug\tIf set to true, creates endlpoints /app/log/access/ which returns a JSON access log from the database and /app/error which throws an error with the message \u0026#34;Error test successful.\u0026#34; Defaults to false. --log\tIf set to false, no log files are written. Defaults to true. Logs are always written to database. --help\tReturn this message and exit. `) // If --help or -h, echo help text to STDOUT and exit if (args.help || args.h) { console.log(help) process.exit(0) }   john@code:~/comp426/a04-johnmar3$ node server.js --debug --log=false --port=54321 --help Command line arguments: { _: [], debug: true, log: 'false', port: 54321, help: true } server.js [options] --port Set the port number for the server to listen on. Must be an integer between 1 and 65535. ... Creating a database Use the methods that we have gone over in class to create a database file called log.db using better-sqlite3 with a table named accesslog. Set up the accesslog table with columns corresponding to variables listed below.\nThe notes from w08 should help with this.\nLogging to database Write a middleware function that inserts a new record in a database containing all of the variables in the following data object:\n let logdata = { remoteaddr: req.ip, remoteuser: req.user, time: Date.now(), method: req.method, url: req.url, protocol: req.protocol, httpversion: req.httpVersion, status: res.statusCode, referer: req.headers['referer'], useragent: req.headers['user-agent'] }  NOTE: the above object previously contained a reference to secure: req.secure, but passing this to better-sqlite3 causes it to choke because the data cannot be coerced into a form that it will accept without a bunch of work. SO, skip it. It\u0026rsquo;s not important for the purposes of this assignment.\n Remember that you have to include next() at the end of your middleware or it will hang.\nAnd also remember to include it in the list of parameters passed to your middleware:\napp.use( (req, res, next) =\u0026gt; { // Your middleware goes here. }) Create endpoints These endpoints should be available if AND ONLY IF the command line option --debug=true is passed when server.js is run.\n/app/log/access Create a new endpoint /app/log/access that returns all records in the accesslog table in your database log.db.\n/app/error Create an endpoint /app/error that returns an error in the response.\nThe error should read \u0026ldquo;Error test successful.\u0026rdquo;\n HINT: This should just work if you model your endpoint on the first example in the error documentation from Express: http://expressjs.com/en/guide/error-handling.html\n Create an access log file In addition to the log in your database, if --log=false is passed when running server.js, then your server should NOT create a log file. Otherwise, your server should create a FILE called access.log and write your access log to it in a combined FORMAT (default behavior).\nUse morgan to accomplish this by sending its output to a write stream from the fs builtin:\n1 2 3 4 5 6 7  ... // Use morgan for logging to files // Create a write stream to append (flags: \u0026#39;a\u0026#39;) to a file const WRITESTREAM = fs.createWriteStream(\u0026#39;FILE\u0026#39;, { flags: \u0026#39;a\u0026#39; }) // Set up the access logging middleware app.use(morgan(\u0026#39;FORMAT\u0026#39;, { stream: WRITESTREAM })) ...   You will need to change everything in ALLCAPS above to suit the instructions.\nList of requirements  Return help message to STDOUT and exit 0 if command line argument --help is passed. Use better-sqlite3 to create a database log.db and populate it with one table accesslog with the variables listed above in the logdata object. Write a middleware function that writes the logdata object variables into the accesslog table in log.db. Create endpoints /app/log/access and /app/error that send a response in the form of an access log and an error test, respectively, when --debug is passed as a command line argument. Write a combined format access log to an access.log file when --log is passed as a command line argument. As usual, include a command line argument to set an arbitrary port number that defaults to 5555.  ","description":"This assignment for COMP 426 will help you create and connect a database and to record access and error logs and for your API server from a03 with some middleware. This is an important piece of building an API, because it allows you to break down what happened if something goes wrong. It also helps other developers use and deploy your software.","id":14,"section":"a","tags":null,"title":"a04 Databases, logs, errors, and middleware","uri":"https://comp426.johndmart.in/a/04/"},{"content":"Assignments This is a tentative list of assignments. These may be adjusted or merged depending on how the course flows.\n   Assignment Title Topics covered Points     a00 Setup Installing software; git and Github; bash/command line 71,428   a01 Node Package management; creating packages; Node.js; npm 71,429   a02 Functions and modules Running JavaScript as program; JavaScript functions 71,428   a03 API Turning functions into endpoints; REST; Express 71,429   a04 Logging and database Interface an API with a database; store logs 71,428   a05 Web interface Connect an interface to your API 71,429   a06 React and auth Reactify your app; add authentication 71,429   a99 Final project Collaboration; Project planning and management 300,000    Assignment submission All assignments will be handled by GitHub classroom. Pushing code to the repository created when you accept assignments will submit the assignment for grading.\nYou can submit (push) as many times as you need to in order to pass the unit tests configured in GitHub classroom.\nThere are due dates for the assignments, but think of these as guideposts to help you keep up so that you do not get behind. The due date will not cut off submission.\nYou will always be able to submit or resubmit after the due date has passed.\nYou will not lose points for pushing code to your assignment repos after the due date for a given assignment has passed, ever.\nFinal project Your final project will be developed with a team.\nThis Spring, we are going to focus our attention on public health information apps and systems. Your team will design an app that fits one of the following profiles or similar:\n Public health information dashboard Public health information tracking app (reporting test or vaccine status, etc.) Public health resource tracking app (availability of testing, masks, PPE, vaccination, other supplies, etc.) Emergency management information portal (planning and decision-making for institutions, government, agencies, etc.) Outbreak/cluster tracking app or dashboard Public health information app for end users (to provide useful information and aggregate credible sources)  Your team will use GitHub to plan and manage your project. You will create documentation for both developers and users of your app. You will also create demos as part of that documentation.\nPresenting final projects There will be no in-class presentation for your final project. Instead, your team will produce a demo video.\nSee a99 instructions for details.\nIt is okay for your project to still be a work in progress when presented.\nAll final project materials will be due on the day scheduled for the final exam.\nAssessments There will be several assessments throughout the course.\nYou will take a questionnaire at the beginning of the course that gives us a baseline for your familiarity with certain tools and concepts.\nThere will also be midterm and final questionnaires, but they will not assess specific knowledge in the way a traditional exam does. Instead they will assess your familiarity with concepts and tools that we are using in the course and allow us to compare across the semester.\n   Assessment Purpose Form Points     Beginning Establish a baseline for skills and topic familiarity Questionnaire 50,000   Midterm Progress and check-in GitHub + Questionnaire 50,000   Final Self- and team-assessment GitHub + Questionnaire 50,000    The midterm and final will include a self-assessment component and also an assessment of your team dynamics.\nThese assessments are designed to evaluate our teaching effectiveness as much as they are designed to assess your skill and familiarity with concepts and tools.\n","description":"There will be a series of programming assignments, a final team project to develop a web application, and several assessments.","id":15,"section":"syllabus","tags":null,"title":"Deliverables and assessments","uri":"https://comp426.johndmart.in/syllabus/assignments/"},{"content":"DUE: 2022-03-11T00:00:00-5:00\nGitHub Classroom invite link: https://classroom.github.com/a/LEjr-By8\nThe instructions for the midterm are in the repository that will be automatically created for you when you accept the assignment using the link above.\nYou are responsible for completing this on your own.\nYou have until the beginning of Spring break to complete the midterm.\n","description":"The midterm for COMP 426 is a survey, but it is also an exercise in following instructions and using the skills that you have been developing in this course.","id":16,"section":"a","tags":null,"title":"MIDTERM","uri":"https://comp426.johndmart.in/a/midterm/"},{"content":"DUE: 2022-04-15T00:00:00-5:00\nGitHub Classroom Assignment Invite: https://classroom.github.com/a/PUVGxeMe\nIssues: https://github.com/comp426-2022-spring/a05/issues\nPackaging an interface In this assignment, you will build an HTML human interface for your API. You will also document your API endpoints and consider package structure.\nWe are going to take our rudimentary interface from in-class examples and expand upon it somewhat for this assignment.\nAssignment requirements  A web interface with:  a landing page \u0026lt;div\u0026gt;  an explanation of the game and basic instructions   a navigation of some kind using buttons that will highlight the active \u0026lt;div\u0026gt; and hide others a flip-one-coin \u0026lt;div\u0026gt;  a button that makes an API call to /app/flip/ and then presents the resulting data to the person using the interface a graphical representation of the resulting coin flip   a flip-many-coins \u0026lt;div\u0026gt;  a button that makes an API call to /app/flip/ and then presents the resulting data to the person using the interface a graphical representation of the resulting coin flips summary information   a guess-flip \u0026lt;div\u0026gt;  Two buttons that make an API call to /app/flip/call and then present the resulting data to the person using the interface a graphical representation of the guess, and the actual result of the coin flip win or loss     Document the API endpoints listed in README.md based on how they actually behave (for those that exist) and how they should behave (for those yet to be implemented).  This is an exercise in planning and scoping as much as anything else. Think about the information that YOU would want or need to work with this app and put it in the README.md   Package structure  Modularize parts of your package and put them into different subdirectories. You have been provided with a basic structure to do this. Put public web files in ./public/ Place your database script file in ./src/services/ Write any log files into `./log/ Store any database files in ./data/ Consider other ways to move code out of index.js and into other parts of the package structure. Be sure to adjust the paths you are using to create files and call dependencies.    Instructions Interface Put your web interface code in ./public/. There is already some boilerplate HTML and CSS there for you to work with.\nYour client-side JavaScript will also live in this directory.\nYou can (and should) use the code we worked on in class during w11 as the basis for your code.\nInstead of having a single HTML file, you will split this code into three separate files:\nindex.html style.css main.js The examples provide almost everything for the the single coin flip and many coin flips interfaces verbatim. Use what is there to develop the guess flip interface and other navigation.\nAPI documentation Your coinserver, at this point, should have all of the API endpoints listed in README.md available, except for two modified endpoints that relate to the w11 examples and requirements for this assignment.\nSee below for details about adding those.\nFor all of the endpoints that currently exist and those that have not yet been implemented, use the examples available in the README.md file to fill out the rest based on actual tests against your API server and speculative planning, respectively. The examples in README.md are from actual tests of a working example Coinserver.\nPackage structure You will use index.js as your main entry point for the app. You will have to modify your existing code a bit to make the structural changes work, but you should start by putting everything that you have been building in server.js in previous assignments into index.js and go from there.\nPlace your database.js file in /src/services/ and change require('database') in your new index.js accordingly so that it can reference it in a subdirectory.\nYou will also want to consider where you put the database itself and log files. Directories have been provided for this in the starter repo.\nServing HTML with express You will need this line in your index.js:\n// Serve static HTML files app.use(express.static('./public')); This will expose everything in the ./public directory to the web using basic HTTP service on the same port as your API endpoints.\nThis way you do not have to use a separate webserver and worry about proxying or CORS.\nAdd modified endpoints Since you will need to send body messages to endpoints using the client-side fetch() API for inputs in the interface for a many-coin flip and flip guess, you need to add two new endpoints to handle it, and invoke some middleware.\nTo make it so index.js can handle JSON body messages, add this line somewhere near the top:\n// Make Express use its own built-in body parser to handle JSON app.use(express.json()); To add endpoints that accept JSON body messages, use the following as an example to adapt your existing endpoints to use body instead of parameters:\napp.post('/app/flip/coins/', (req, res, next) =\u0026gt; { const flips = coinFlips(req.body.number) const count = countFlips(flips) res.status(200).json({\u0026quot;raw\u0026quot;:flips,\u0026quot;summary\u0026quot;:count}) }) app.post('/app/flip/call/', (req, res, next) =\u0026gt; { const game = flipACoin(req.body.guess) res.status(200).json(game) }) For reference, the following two endpoints use parameters, which is the way that your current API from a03 should be working.\napp.get('/app/flips/:number', (req, res, next) =\u0026gt; { const flips = coinFlips(req.params.number) const count = countFlips(flips) res.status(200).json({\u0026quot;raw\u0026quot;:flips,\u0026quot;summary\u0026quot;:count}) }); app.get('/app/flip/call/:guess(heads|tails)/', (req, res, next) =\u0026gt; { const game = flipACoin(req.params.guess) res.status(200).json(game) }) Note the simliarities and differences.\nUse the above examples to adapt your existing code in similar ways.\nThings to remember It doesn\u0026rsquo;t have to be pretty It just has to work.\nThe point of this assignment is to make a web interface function, not to make it polished and shiny.\nBy all means, if you are bored and interested in exploring that aspect of web development, feel free. But it is not a requirement.\nThere will also be a ghost assignment that can point you to to resources and tutorials for making this app more polished if you like. Watch for it to be listed on the assignments page. It will be entirely optional and you can receive extra credit for it if you wish to submit it.\nDocumentation is super important A human interface isn\u0026rsquo;t just about clicking buttons and having things dance around on a screen.\nA human interface should include information for people interacting with your app about how it works: PARTICULARLY for open source development.\nSo, don\u0026rsquo;t think of the documentation as an afterthought. Focus on it as a critical component.\nExplore package structure You are not required to restructure your package beyond what is described above, but you are encouraged to consider how to do this.\nThere are many different conventions and practices related to structuring packages. These can help communicate where to find certain things to other developers.\nThese links can help you think about where and how to structure your packages. But do keep in mind that this is, like everything we do, but one example of how to do a thing.\nOrganizing your Express.js project structure for better productivity - Geshan Manandhar\nexpressjs-structure - @geshan\nYou will need to make sure you use the dependency techniques we are familiar with to make the files in different directories talk to one another. This will be useful for the next assignment, which will involve converting all of this into a React app.\nGood skill! You have all the skills needed to do all of this.\nYou also already have most of the code needed to do this.\nYou don\u0026rsquo;t need luck.\nAnd, if you need help, we are always here. Just (create an issue on the main a05 repo page)[https://github.com/comp426-2022-spring/a05/issues].\n","description":"In this assignment, you will build an HTML human interface for your existing coinserver API. You will also document your API endpoints and consider package structure.","id":17,"section":"a","tags":null,"title":"a05 Human Interface","uri":"https://comp426.johndmart.in/a/05/"},{"content":"Grade breakdown Grading will be based on 1,000,000 points. The breakdown is as follows.\n   Component Description Quantity Points Subtotal     Assignments Individual programming assignments 7 71,429* 500,000    Extra credit assignment available 1 25,000 (25,000)   Final project Team-based app development 1 300,000 300,000   Assessments Questionnaires 3 50,000 150,000   Engagement GitHub commits 100 500 50,000   Total    1,000,000    * Three of the assignments will be worth 71,428 points because of rounding.\nComponents Assignments Each of the individual programming assignments will be worth 71,428 points and will be automatically evaluated.\nThe autograders will give you feedback so that you can make adjustments to your code to debug it so that it passes the unit tests.\nThe grade is not the point of any of this. Writing working code is the point of this.\nAssignment due dates The assignment due dates are meant as guideposts, not deadlines.\nYou can always submit or resubmit the assignments (by pushing them to your GitHub repository) after the due date.\nYou will not lose points for push or updating your repos after the due date has passed, ever.\nFinal project points breakdown    Component Description Points     Group planning Documentation of your planning process 50,000   API Back-end API has defined endpoints that you can make queries against. 75,000   Interface Front-end connects to and interacts with API endpoints and stores/retrieves user or other information. 75,000   Documentation There is documentation about what you did and how it works. 50,000   Demo Walkthrough/clickthrough screencap demo of your app and presentation to class. 50,000   Total  300,000    Every member of your team will receive the same number of points for the final project.\nThe grade breakdown will not be more granular than what is listed above. Your team\u0026rsquo;s project must have the five components above.\nYou will check in with a TA assigned to your team throughout the semester as you plan and build. We will give you qualitative feedback on your work throughout and as part of the final presentation.\nAssessments Questionnaires given at the beginning, middle, and end of the semester.\nEngagement Your engagement score is a count of your GitHub commits. I am gathering this directly from your GitHub repositories submitted for your assignments and your team\u0026rsquo;s final project repos.\nI will gather these counts to encourage you to commit small changes meaning that there should be a lot of them.\nThe number that you are responsible for is actually relatively few. You should easily be able to record over 100 commits over the course of the semester across 10 assignments and the final project. In fact, you should have WAY more than that.\n","description":"Your work in this class will be evaluated in a mostly automated way that gives you immediate feedback. You will also receive qualitative feedback. Grades are reckoned on a 1,000,000-point scale.","id":18,"section":"syllabus","tags":null,"title":"Grading","uri":"https://comp426.johndmart.in/syllabus/grading/"},{"content":"Getting started with Express 2022-02-15T15:30:00-05:00\nAgenda  API anatomy Walkthrough: create your own API in Express (aka a03)  Useful links Node HTTP interfaces documentation\nExpress API reference\nExpress getting started: Hello world example\nExpress guide: Routing\nBuilding a REST API with Node and Express - David Landup\nGoogle. It.\nThere is A LOT of information out there about using Express to build an API. Don\u0026rsquo;t be afraid of it. Use it.\nNotes Defining endpoints and using git 2022-02-17T15:30:00-05:00\nAgenda  Define default endpoints Git branch, checkout, and merge Define other endpoints Using req.params inside endpoint functions  Useful links Notes ","description":"This week we will discuss and demo creating APIs using Express.js. We will also discuss creating modules to contain multiple functions and operate as packages that we can port from project to project.","id":19,"section":"w","tags":null,"title":"w05 Time to make the APIs","uri":"https://comp426.johndmart.in/w/05/"},{"content":"DUE: N/A\nGitHub Classroom Assignment Invite: https://classroom.github.com/a/VGa4L5eC\nIssues: https://github.com/comp426-2022-spring/e01/issues\nDescription: This optional assignment is intended to help you add a little polish to your HTML and CSS if you wish to do so. You can receive extra credit for it if you wish to submit it.\nInstructions Follow the instructions in the comments in files listed inside the /public directory.\n1  \u0026lt;!-- HTML comments look like this --\u0026gt;   1  /* CSS comments look like this */   Useful links General HTML https://www.w3schools.com/html/default.asp\nhttps://developer.mozilla.org/en-US/docs/Web/HTML\nGeneral CSS https://www.w3schools.com/css/default.asp\nhttps://developer.mozilla.org/en-US/docs/Web/CSS\nHex colors https://www.color-hex.com/\nhttps://colorcodes.io/blue/azure-color-codes/\nhttps://colorcodes.io/blue/navy-blue-color-codes/\nhttps://en.wikipedia.org/wiki/Carolina_blue\nAssignment reference https://www.w3schools.com/howto/howto_css_register_form.asp\n","description":"This optional assignment is intended to help you add a little polish to your HTML and CSS if you wish to do so. You can receive extra credit for it if you wish to submit it.","id":20,"section":"a","tags":null,"title":"HTML+CSS (extra credit)","uri":"https://comp426.johndmart.in/a/html-css/"},{"content":"DUE: 2022-04-27T00:00:00-5:00\nGitHub Classroom Assignment Invite: COMING SOON\nIssues: https://github.com/comp426-2022-spring/a06/issues\nConvert your existing web app with API into a React app.\n","description":"Convert your existing web app with API into a React app.","id":21,"section":"a","tags":null,"title":"a06 React","uri":"https://comp426.johndmart.in/a/06/"},{"content":"The University of North Carolina at Chapel Hill has had a student-led honor system for over 100 years. Academic integrity is at the heart of Carolina and we all are responsible for upholding the ideals of honor and integrity. The student-led Honor System is responsible for adjudicating any suspected violations of the Honor Code and all suspected instances of academic dishonesty will be reported to the Honor System. Information, including your responsibilities as a student, is outlined in the Instrument of Student Judicial Governance. Your full participation and observance of the Honor Code are expected.\nWhat does this mean for a programming class where we are encouraging collaboration? It means that you should do original work in concert with other members of your group. Assign credit appropriately. Help each other learn how to do things.\nOn individual assignments, you should be writing your own code. But if you need help, then seek it out.\nDo not copy + paste code from the Internet. If you are inspired by open source code, then make a reference to the source in a comment. If you adapt open source code, then adhere to its license and make sure that your work is licensed appropriately.\n","description":"The University of North Carolina at Chapel Hill has had a student-led honor system for over 100 years. Academic integrity is at the heart of Carolina and we all are responsible for upholding the ideals of honor and integrity.","id":22,"section":"syllabus","tags":null,"title":"Honor Code","uri":"https://comp426.johndmart.in/syllabus/honor/"},{"content":"Request body and middleware 2022-02-22T15:30:00-05:00\nAgenda  Questions about a99 Review endpoints Middleware Request body  Slides https://comp426-2022-spring.github.io/slides/w06-00.html\nUseful links req variables Request (req object)\nMiddleware Using middleware\nWriting middleware for use in Express apps\nWhat is middleware in Express.js?\nHow to save logs to files instead of showing it to the console in Node.js\nCurl Run Curl Commands Online\nHow do I post JSON request body with Curl?\nNodemon Nodemon is like browsersync but for your Node apps.\nnodemon\nNotes Logging and error handling 2022-02-24T15:30:00-05:00\nAgenda  regex Why log? What do we log? How to log?  Slides https://comp426-2022-spring.github.io/slides/w06-01.html\nUseful links Logs Access and error logs - Loggly\nLog file formats\nCommon Log Format (NCSA)\nHow to save logs to files instead of showing it to the console in Jode.js? - Melvin George\nLog Levels - sumo logic\nUnderstanding logging levels - Rafal Kuć\nregex Regex tutorial - Jonny Fox\nregular expressions 101\nRegex Crossword\nNotes ","description":"This week we will discuss passing information to endpoints with queries and creating middleware.","id":23,"section":"w","tags":null,"title":"w06 More fun with APIs","uri":"https://comp426.johndmart.in/w/06/"},{"content":"Counseling and Psychological Services (CAPS) CAPS is strongly committed to addressing the mental health needs of a diverse student body throughtimely access to consultation and connection to clinically appropriate services, whether for short or long-term needs.\nGo to their website: https://caps.unc.edu/ or visit their facilities on the third floor of the Campus Health Services building for a walk-in evaluation to learn more.\nHelp us help you If you are struggling, speak to a TA and/or the instructor. We can and will make adjustments that will help you to better cope and thrive in this class.\nThings are hard. You are not alone.\n","description":"It's important to take care of your emotional and mental health and well-being. You cannot learn things if you are in distress. There are resources available to you and we can help you find them.","id":24,"section":"syllabus","tags":null,"title":"Mental health and well-being","uri":"https://comp426.johndmart.in/syllabus/wellbeing/"},{"content":"Logging to file 2022-03-01T15:30:00-05:00\nAgenda  Logging wrap-up Thinking about sources of error Errors in Express Writing error and other logs to file  Useful links Generating logs Express.js and Morgan Logging\nHow to use morgan in your Express project - Cooper Makhijani\nMorgan NPM Logger - The Beginner\u0026rsquo;s Guide - Fernando Doglio\nMorgan NPM Logger (source code)\nMorgan (npm package)\nA guide to Node.js logging - Dominik Kundel\nNode.js logging made easy: A tutorial on just about everything you need to know - Adnan Rahić\nError handling Error Handling - Express Guide\nA guide to error handling in Express.js - Mukul Khanna\nHow to handle errors in Express - Robin Wieruch\nExpressJS - Error Handling - Tutorialspoint\nBetter error handling in Express.js - Kevin Luu\nHow to hangle errors in an Express and Node.js app - Olusola Samuel\nUsing Express.js routes for promise-based error handling - Vitaly Senko\nWriting log files Morgan - Express\nLogging - RIP Tutorial\nNode.js logging - How to get started\nA complete guide to Node.js logging (with the best practices for logging) - Yasas Sandeepa\nHow to get started with logging in Node.js - Better Stack Team\nNotes In class on Tuesday, we were working through writing an access log to a file instead of just echoing to STDOUT.\nWe were going in the right direction, but time ran out\u0026hellip; and we were kind of overthinking things.\nmorgan() takes two arguments: a log type and an object with options.\nIn our case, we wanted to write the log output to a stream using the FS module.\nThe end result would be this:\n1 2 3 4 5 6 7  ... // Use morgan for logging to files // Create a write stream to append to an access.log file const accessLog = fs.createWriteStream(\u0026#39;access.log\u0026#39;, { flags: \u0026#39;a\u0026#39; }) // Set up the access logging middleware app.use(morgan(\u0026#39;combined\u0026#39;, { stream: accessLog })) ...   The above code will produse a file access.log that looks like this:\n::1 - - [02/Mar/2022:01:45:47 +0000] \u0026quot;GET /app/flips/60 HTTP/1.1\u0026quot; 200 523 \u0026quot;-\u0026quot; \u0026quot;curl/7.74.0\u0026quot; ::1 - - [02/Mar/2022:01:46:08 +0000] \u0026quot;GET /app/flip/call/heads HTTP/1.1\u0026quot; 200 47 \u0026quot;-\u0026quot; \u0026quot;curl/7.74.0\u0026quot; ::1 - - [02/Mar/2022:01:46:14 +0000] \u0026quot;GET /app/flips/700 HTTP/1.1\u0026quot; 200 5645 \u0026quot;-\u0026quot; \u0026quot;curl/7.74.0\u0026quot; ::1 - - [02/Mar/2022:01:46:23 +0000] \u0026quot;GET /app/flips/9000 HTTP/1.1\u0026quot; 200 72047 \u0026quot;-\u0026quot; \u0026quot;curl/7.74.0\u0026quot; ::1 - - [02/Mar/2022:01:46:32 +0000] \u0026quot;GET /app/flips/90000 HTTP/1.1\u0026quot; 200 720049 \u0026quot;-\u0026quot; \u0026quot;curl/7.74.0\u0026quot; ::1 - - [03/Mar/2022:22:57:18 +0000] \u0026quot;GET /app/flip/ HTTP/1.1\u0026quot; 200 16 \u0026quot;-\u0026quot; \u0026quot;curl/7.74.0\u0026quot; Databases Agenda  Types of database When to use a database Making your API talk to a database Database connections  Useful links Express Database Integration Guide\nDatabase integration in Express\nSQLite3 better-sqlite3 API documentation\nbetter-sqlite3 - NPM\nSQLite3 data types\nNotes Right at the end of the session today when I tried to run our new database.js script, it caught an error and we were out of time so I didn\u0026rsquo;t want to run it down right then. The error looked like this:\njohn@code:~/comp426/a04-draft$ node server.js Log database appears to be empty. Creating log database... /home/john/comp426/a04-draft/node_modules/better-sqlite3/lib/methods/wrappers.js:9 this[cppdb].exec(sql); ^ SqliteError: near \u0026quot;-\u0026quot;: syntax error at Database.exec (/home/john/comp426/a04-draft/node_modules/better-sqlite3/lib/methods/wrappers.js:9:14) at Object.\u0026lt;anonymous\u0026gt; (/home/john/comp426/a04-draft/database.js:14:11) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.\u0026lt;anonymous\u0026gt; (/home/john/comp426/a04-draft/server.js:5:15) at Module._compile (node:internal/modules/cjs/loader:1101:14) { code: 'SQLITE_ERROR' } And my script looked like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  const database = require(\u0026#39;better-sqlite3\u0026#39;) const logdb = new database(\u0026#39;log.db\u0026#39;) const stmt = logdb.prepare(`SELECT name FROM sqlite_master WHERE type=\u0026#39;table\u0026#39; and name=\u0026#39;access\u0026#39;;`) let row = stmt.get(); if (row === undefined) { console.log(\u0026#39;Log database appears to be empty. Creating log database...\u0026#39;) const sqlInit = ` CREATE TABLE access ( id INTEGER PRIMARY KEY, remote-addr VARCHAR, remote-user VARCHAR, datetime VARCHAR, method VARCHAR, url VARCHAR, http-version NUMERIC, status INTEGER, content-length NUMERIC); ` logdb.exec(sqlInit) } else { console.log(\u0026#39;Log database exists.\u0026#39;) } module.exports = logdb   The relevant piece of the error log is:\n... SqliteError: near \u0026quot;-\u0026quot;: syntax error ... at Object.\u0026lt;anonymous\u0026gt; (/home/john/comp426/a04-draft/database.js:14:11) This means that I have a SQLite syntax error on line 14 at position 11, which is a reference to the const named sqlInit. And that const has several hyphens (\u0026quot;-\u0026quot;) in it, which is a syntax error.\nWhy?\nBecause in SQL syntax, a hyphen is an operator and we can\u0026rsquo;t use it in variable names\u0026hellip; and we have several.\nSO, what our script should look like instead is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  const database = require(\u0026#39;better-sqlite3\u0026#39;) const logdb = new database(\u0026#39;log.db\u0026#39;) const stmt = logdb.prepare(`SELECT name FROM sqlite_master WHERE type=\u0026#39;table\u0026#39; and name=\u0026#39;access\u0026#39;;`) let row = stmt.get(); if (row === undefined) { console.log(\u0026#39;Log database appears to be empty. Creating log database...\u0026#39;) const sqlInit = ` CREATE TABLE accesslog ( id INTEGER PRIMARY KEY, remote_addr VARCHAR, remote_user VARCHAR, date VARCHAR, method VARCHAR, url VARCHAR, http_version NUMERIC, status INTEGER, content_length NUMERIC, referrer_url VARCHAR, user_agent VARCHAR ); ` logdb.exec(sqlInit) } else { console.log(\u0026#39;Log database exists.\u0026#39;) } module.exports = logdb   Replacing the hyphens with underscores (snake case) makes our field names work properly.\nThe above script will check for an access log table in a database, and if it doesn\u0026rsquo;t exist, it will initialize the DB and create a table that will hold all of the relevant pieces of information to be able to reproduce a combined log entry.\n","description":"This week we will finish looking at logging and error handling and begin considering how to store data and where.","id":25,"section":"w","tags":null,"title":"w07 Logging","uri":"https://comp426.johndmart.in/w/07/"},{"content":"Accessibility Resources The University of North Carolina at Chapel Hill facilitates the implementation of reasonable accommodations, including resources and services, for students with disabilities, chronic medical conditions, a temporary disability or pregnancy complications resulting in barriers to fully accessing University courses, programs and activities.\nAccommodations are determined through the Office of Accessibility. Resources and Service (ARS) for individuals with documented qualifying disabilities in accordance with applicable state and federal laws. See the ARS Website for contact information: https://ars.unc.edu or email ars@unc.edu.\nAccommodation plans If you have an accommodation plan, please feel welcomed to make an appointment or come to instructor office hours to discuss it. I would like to make sure that we are honoring your plan.\nMost likely, I will work to incorporate accommodations into the course design. This way, we increase the accessibility of the entire course, for everyone.\n","description":"The University of North Carolina at Chapel Hill facilitates the implementation of reasonable accommodations, including resources and services, for students with disabilities, chronic medical conditions, a temporary disability or pregnancy complications resulting in barriers to fully accessing University courses, programs and activities.","id":26,"section":"syllabus","tags":null,"title":"Accessibility","uri":"https://comp426.johndmart.in/syllabus/accessibility/"},{"content":"Database interaction endpoints 2022-03-08T15:30:00-05:00\n Create database for arbitrary data Create endpoint to send arbitrary data to DB Read data through endpoint Update data through endpoint Delete data through endpoint  Useful links General database integration Express Database Integration Guide\nDatabase integration in Express\nSQLite3 better-sqlite3 API documentation\nbetter-sqlite3 - NPM\nSQLite3 data types\nNotes Below is the database service script that I used in class today:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  // This ensures that things do not fail silently but will throw errors instead. \u0026#34;use strict\u0026#34;; // Require better-sqlite. const Database = require(\u0026#39;better-sqlite3\u0026#39;); // Connect to a database or create one if it doesn\u0026#39;t exist yet. const db = new Database(\u0026#39;user.db\u0026#39;); // Is the database initialized or do we need to initialize it? const stmt = db.prepare(` SELECT name FROM sqlite_master WHERE type=\u0026#39;table\u0026#39; and name=\u0026#39;userinfo\u0026#39;;` ); // Define row using `get()` from better-sqlite3 let row = stmt.get(); // Check if there is a table. If row is undefined then no table exists. if (row === undefined) { // Echo information about what you are doing to the console.  console.log(\u0026#39;Your database appears to be empty. I will initialize it now.\u0026#39;); // Set a const that will contain your SQL commands to initialize the database.  const sqlInit = ` CREATE TABLE userinfo ( id INTEGER PRIMARY KEY, username TEXT, password TEXT ); INSERT INTO userinfo (username, password) VALUES (\u0026#39;user1\u0026#39;,\u0026#39;supersecurepassword\u0026#39;),(\u0026#39;test\u0026#39;,\u0026#39;anotherpassword\u0026#39;); `; // Execute SQL commands that we just wrote above.  db.exec(sqlInit); // Echo information about what we just did to the console.  console.log(\u0026#39;Your database has been initialized with a new table and two entries containing a username and password.\u0026#39;); } else { // Since the database already exists, echo that to the console.  console.log(\u0026#39;Database exists.\u0026#39;) } // Export all of the above as a module so that we can use it elsewhere. module.exports = db   And the server script with the endpoint definitions we demoed in class is included below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83  // Define app using express var express = require(\u0026#34;express\u0026#34;) var app = express() // Require database SCRIPT file const db = require(\u0026#34;./database.js\u0026#34;) // Require md5 MODULE //var md5 = require(\u0026#34;md5\u0026#34;) // Make Express use its own built-in body parser for both urlencoded and JSON body data. app.use(express.urlencoded({ extended: true })); app.use(express.json()); // Server port var HTTP_PORT = 5000 // Start server const server = app.listen(HTTP_PORT, () =\u0026gt; { console.log(\u0026#34;Server running on port %PORT%\u0026#34;.replace(\u0026#34;%PORT%\u0026#34;,HTTP_PORT)) }); // READ (HTTP method GET) at root endpoint /app/ app.get(\u0026#34;/app/\u0026#34;, (req, res, next) =\u0026gt; { res.json({\u0026#34;message\u0026#34;:\u0026#34;Your API works! (200)\u0026#34;}); res.status(200); }); // Define other CRUD API endpoints using express.js and better-sqlite3 // CREATE a new user (HTTP method POST) at endpoint /app/new/ app.post(\u0026#34;/app/new/user\u0026#34;, (req, res, next) =\u0026gt; { let data = { user: req.body.username, pass: req.body.password } const stmt = db.prepare(\u0026#39;INSERT INTO userinfo (username, password) VALUES (?, ?)\u0026#39;) const info = stmt.run(data.user, data.pass) res.status(200).json(info) }); // READ a list of users (HTTP method GET) at endpoint /app/users/ app.get(\u0026#34;/app/users\u0026#34;, (req, res) =\u0026gt; {\ttry { const stmt = db.prepare(\u0026#39;SELECT * FROM userinfo\u0026#39;).all() res.status(200).json(stmt) } catch { console.error(e) } }); // READ a single user (HTTP method GET) at endpoint /app/user/:id app.get(\u0026#34;/app/user/:id\u0026#34;, (req, res) =\u0026gt; { try { const stmt = db.prepare(\u0026#39;SELECT * FROM userinfo WHERE id = ?\u0026#39;).get(req.params.id); res.status(200).json(stmt) } catch (e) { console.error(e) } }); // UPDATE a single user (HTTP method PATCH) at endpoint /app/update/user/:id app.patch(\u0026#34;/app/update/user/:id\u0026#34;, (req, res) =\u0026gt; { let data = { user: req.body.username, pass: req.body.password } const stmt = db.prepare(\u0026#39;UPDATE userinfo SET username = COALESCE(?,username), password = COALESCE(?,password) WHERE id = ?\u0026#39;) const info = stmt.run(data.user, data.pass, req.params.id) res.status(200).json(info) }); // DELETE a single user (HTTP method DELETE) at endpoint /app/delete/user/:id app.delete(\u0026#34;/app/delete/user/:id\u0026#34;, (req, res) =\u0026gt; { const stmt = db.prepare(\u0026#39;DELETE FROM userinfo WHERE id = ?\u0026#39;) const info = stmt.run(req.params.id) res.status(200).json(info) }); // Default response for any other request app.use(function(req, res){ res.json({\u0026#34;message\u0026#34;:\u0026#34;Endpoint not found. (404)\u0026#34;}); res.status(404); }); process.on(\u0026#39;SIGTERM\u0026#39;, () =\u0026gt; { server.close(() =\u0026gt; { console.log(\u0026#39;Server stopped\u0026#39;) }) })   Intro to client-side programming Agenda  Server-side v. client-side scripting Basic HTML and CSS Client-side APIs  Document Object Model (DOM) Fetch Client-side storage of data    Useful links Differences between Node.js and the Browser - Node.js\nAn Introduction to JavaScript - javascript.info\nJavaScript in the browser console - Allison Parrish\nDOM What is the Document Object Model - Level 1 DOM specification\nIntroduction to the DOM - MDN Web Docs\nFetch JavaScript Fetch API - JavaScript Tutorial\nJavaScript Fetch API Tutorials with JS Fetch Post and Header Examples - Manish Shivanandhan\nNotes ","description":"This week we will continue working with SQLite3 databases as both a source and target for data through endpoint definitions using Express.","id":27,"section":"w","tags":null,"title":"w08 Data from endpoints to database","uri":"https://comp426.johndmart.in/w/08/"},{"content":"Title IX Resources Any student who is impacted by discrimination, harassment, interpersonal (relationship) violence, sexual violence, sexual exploitation, or stalking is encouraged to seek resources on campus or in the community.\nPlease contact the Director of Title IX Compliance (Adrienne Allison – Adrienne.allison@unc.edu), Report and Response Coordinators in the Equal Opportunity and Compliance Office (reportandresponse@unc.edu), Counseling and Psychological Services (confidential), or the Gender Violence Services Coordinators (gvsc@unc.edu; confidential) to discuss your specific needs. Additional resources are available at safe.unc.edu.\n","description":"Any student who is impacted by discrimination, harassment, interpersonal (relationship) violence, sexual violence, sexual exploitation, or stalking is encouraged to seek resources on campus or in the community.","id":28,"section":"syllabus","tags":null,"title":"Title IX","uri":"https://comp426.johndmart.in/syllabus/title9/"},{"content":"No class No class on 2022-03-15T15:30:00-05:00 or 2022-03-17T15:30:00-05:00.\nThere will be no office hours held the week of spring break.\nTake some time for yourself, rest, and don\u0026rsquo;t do anything for this class.\n","description":"WOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO!","id":29,"section":"w","tags":null,"title":"w09 Spring Break","uri":"https://comp426.johndmart.in/w/09/"},{"content":"Ch-ch-ch-ch-changes The instructor reserves to right to make changes to the syllabus, including any project due dates, assessment dates, assignments, or other aspects of the schedule and structure.\nThings change. We live in uncertain times. We will adjust the course accordingly if it becomes necessary to do so.\n","description":"The instructor reserves to right to make changes to the syllabus, including any project due dates, assessment dates, assignments, or other aspects of the schedule and structure.","id":30,"section":"syllabus","tags":null,"title":"Disclaimer","uri":"https://comp426.johndmart.in/syllabus/disclaimer/"},{"content":"Making interface design decisions 2022-03-22T15:30:00-05:00\nAgenda  What is a human interface? Accessibility and Usability Components and features of an interface  Interactions Use flows / pathways Skeuomorphs Information architecture   How do we decide what goes into the interface? Specifying design parameters  Slides https://comp426-2022-spring.github.io/slides/w10-00.html\nUseful links User Interface Elements Every Designer Should Know - UXPin\nUser Interface Design - IxDF\nSkeuomorphism - IxDF\nusability.gov User Interface Elements\nHow To and Tools\nInteraction Design Basics\nInformation Architecture basics\nAccessibility Basics\nNotes Design parameter sketch In class, we sketch out a human interface for our coin-flipping API.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  \u0026lt;!-- Multiple pages/views Nav / menu Backend stuff: at least 2 endpoints login action --\u0026gt; \u0026lt;!-- Get a person to flip a coin button image--\u0026gt; \u0026lt;!-- Call a coin flip heads or tails (guess) --\u0026gt; \u0026lt;!-- Flip a bunch of coins --\u0026gt; \u0026lt;!-- Present outcome of whatever interaction --\u0026gt; \u0026lt;!-- Return one flip --\u0026gt; \u0026lt;!-- Present result and comparison of guess/actual --\u0026gt; \u0026lt;!-- Present all the flips --\u0026gt; \u0026lt;!-- Login session web form textbox (x2) button --\u0026gt; \u0026lt;!-- Show previous results --\u0026gt; \u0026lt;!-- Leaderboard --\u0026gt; \u0026lt;!-- Give statistics --\u0026gt; \u0026lt;!-- Last login / last play --\u0026gt; \u0026lt;!-- Compete --\u0026gt;   The Browser and the DOM 2022-03-24T15:30:00-5:00\nSlides https://comp426-2022-spring.github.io/slides/w10-01.html\nUseful links Chrome DevTools Documentation\nw3schools Window Object\nDocument Object\nactiveElement\naddEventListener()\nNotes I got ahead of myself on Thursday and had to backtrack a bit. My initial intent was to show you how to add an event listener that would show the active element somewhere on the page when something is clicked and THEN create another listener to manipulate the contents of an element when you interact with that same element.\nIn this case, a button that stands in for a coin and then a paragraph that tells us what element you just clicked on.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Demo Coin\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- A \u0026#34;coin\u0026#34; button --\u0026gt; \u0026lt;button id=\u0026#34;coin\u0026#34;\u0026gt;Coin\u0026lt;/button\u0026gt; \u0026lt;!-- A status paragraph --\u0026gt; \u0026lt;p id=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; // Event listener for whatever is being clicked \tdocument.addEventListener(\u0026#34;click\u0026#34;, activeNow); // Replace text in anything with \u0026#34;active\u0026#34; id \tfunction activeNow() { const active_now = document.activeElement document.getElementById(\u0026#34;active\u0026#34;).innerHTML = active_now; console.log(active_now) } // Button coin flip element \tconst coin = document.getElementById(\u0026#34;coin\u0026#34;) // Add event listener for coin button \tcoin.addEventListener(\u0026#34;click\u0026#34;, flipCoin) function flipCoin() { flip = \u0026#34;FLIPPED\u0026#34; document.getElementById(\u0026#34;coin\u0026#34;).innerHTML = flip; console.log(\u0026#34;Coin has been flipped. Result: \u0026#34;+ flip) } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Next week we will work on using Fetch to call our API and replace the \u0026ldquo;flip\u0026rdquo; const above with whatever information is returned by a call to http://localhost:5000/app/flip/ so that our coin flip actually returns an emulated flip. Then we can make it look prettier.\nFor now, the above code should result in something that looks like this:\nAnd then when you click the \u0026ldquo;coin\u0026rdquo; button:\n","description":"This week we will move from the back-end to the front-end.","id":31,"section":"w","tags":null,"title":"w10 Human interfaces","uri":"https://comp426.johndmart.in/w/10/"},{"content":"Fetch 2022-03-29T15:30:00-05:00\nAgenda  Revisit button click Add a result field Add an image Make an API call with fetch() Use the response from fetch() to manipulate elements.  Slides https://comp426-2022-spring.github.io/slides/w11-00.html\nUseful links HTML DOM Element setAttribute() - w3schools\nUse Express to deliver HTML files - Chris Sev\nPromises - MDN\nButtons and Forms HTML DOM Button Object\nHTML DOM Form Object\nfetch Introduction to fetch() - Matt Gaunt\nHow to Use the JavaScript Fetch API to Perform HTTP Requests - Ryan Glover\nfetch() - MDN\nUsing the Fetch API - MDN\nHow to use Fetch with async/await - Dmitri Pavlutin\nNotes Below is the coin flip interface that we put together in class.\nYou can serve this page using browser-sync -sw, if you have placed it in a node package with browsersync installed in it. It will serve on port 3000.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Demo Coin\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; img#quarter { width: 100px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- A \u0026#34;coin\u0026#34; button --\u0026gt; \u0026lt;button id=\u0026#34;coin\u0026#34;\u0026gt;Flip?\u0026lt;/button\u0026gt; \u0026lt;!-- A status paragraph --\u0026gt; \u0026lt;p id=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- A result paragraph--\u0026gt; \u0026lt;p\u0026gt;Result: \u0026lt;span id=\u0026#34;result\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- An image of a US quarter (North Carolina variant) --\u0026gt; \u0026lt;img src=\u0026#34;coin.jpg\u0026#34; id=\u0026#34;quarter\u0026#34;\u0026gt; \u0026lt;script\u0026gt; // Event listener for whatever is being clicked //\tdocument.addEventListener(\u0026#34;click\u0026#34;, activeNow); // Replace text in anything with \u0026#34;active\u0026#34; id \t// function activeNow() { \t// const active_now = document.activeElement \t// document.getElementById(\u0026#34;active\u0026#34;).innerHTML = active_now; \t// console.log(active_now) \t// } // Button coin flip element \tconst coin = document.getElementById(\u0026#34;coin\u0026#34;) // Add event listener for coin button \tcoin.addEventListener(\u0026#34;click\u0026#34;, flipCoin) function flipCoin() { fetch(\u0026#39;http://localhost:5000/app/flip/\u0026#39;, {mode: \u0026#39;cors\u0026#39;}) .then(function(response) { return response.json(); }) .then(function(result) { console.log(result); document.getElementById(\u0026#34;result\u0026#34;).innerHTML = result.flip; document.getElementById(\u0026#34;quarter\u0026#34;).setAttribute(\u0026#34;src\u0026#34;, result.flip+\u0026#34;.jpg\u0026#34;); coin.disabled = true }) //\tlet flip = \u0026#34;FLIPPED\u0026#34; //\tdocument.getElementById(\u0026#34;coin\u0026#34;).innerHTML = flip; //\tconsole.log(\u0026#34;Coin has been flipped. Result: \u0026#34;+ flip) \t} \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   You will need to enable Cross-Origin Resource Sharing (CORS) server-side since your server will be listening on a different port (5000).\nTo do this, run npm install cors in your server package repository.\nThen add the following to your server.js:\n1 2 3 4  // Add cors dependency const cors = require(\u0026#39;cors\u0026#39;) // Set up cors middleware on all endpoints app.use(cors())   Here are the coin images that I used:\nasync/await and FormData 2022-03-31T15:30:00-05:00\nAgenda  Using async and await with fetch Use fetch to POST data to API Serve static html from Express  Useful links How to use Fetch with async/await - Dmitri Pavlutin\nHow to use fetch to POST form data as JSON to your API - Simon Plenderleith\nServing static files with Node and Express.js - Janith Kasun\nNotes Here is the working example for a simple form that sends a POST request to an API endpoint defined at http://localhost:5000/app/flip/coins/.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Demo Coin\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;multi\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Flip many coins\u0026lt;/h1\u0026gt; \u0026lt;form id=\u0026#34;coins\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;number\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;How many coins?\u0026lt;/strong\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;number\u0026#34; name=\u0026#34;number\u0026#34; id=\u0026#34;number\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Flip \u0026#39;em!\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;h2\u0026gt;Results\u0026lt;/h2\u0026gt; \u0026lt;p id=\u0026#34;heads\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;tails\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // Our flip many coins form \tconst coins = document.getElementById(\u0026#34;coins\u0026#34;) // Add event listener for coins form \tcoins.addEventListener(\u0026#34;submit\u0026#34;, flipCoins) // Create the submit handler \tasync function flipCoins(event) { event.preventDefault(); const endpoint = \u0026#34;app/flip/coins/\u0026#34; const url = document.baseURI+endpoint const formEvent = event.currentTarget try { const formData = new FormData(formEvent); const flips = await sendFlips({ url, formData }); console.log(flips); document.getElementById(\u0026#34;heads\u0026#34;).innerHTML = \u0026#34;Heads: \u0026#34;+flips.summary.heads; document.getElementById(\u0026#34;tails\u0026#34;).innerHTML = \u0026#34;Tails: \u0026#34;+flips.summary.tails; } catch (error) { console.log(error); } } // Create a data sender \tasync function sendFlips({ url, formData }) { const plainFormData = Object.fromEntries(formData.entries()); const formDataJson = JSON.stringify(plainFormData); console.log(formDataJson); const options = { method: \u0026#34;POST\u0026#34;, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, Accept: \u0026#34;application/json\u0026#34; }, body: formDataJson }; const response = await fetch(url, options); return response.json() } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   To make this work, you will need to have the following body parser middleware (built into Express) enabled in your server.js script:\n1 2  // Allow JSON body messages on all endpoints app.use(express.json())   In addition, you will need this endpoint defined, which differs slightly from the versions that you might have developed for previous assignments:\n1 2 3 4 5 6  // Flip a bunch of coins with one body variable (number) app.post(\u0026#39;/app/flip/coins/\u0026#39;, (req, res, next) =\u0026gt; { const flips = coinFlips(req.body.number) const count = countFlips(flips) res.status(200).json({\u0026#34;raw\u0026#34;:flips,\u0026#34;summary\u0026#34;:count}) })   And finally, if you place index.html into a subdirectory named www, you can add this line to your server script and it will serve the interface along with the API when you run node server.js:\n1 2  // Serve static HTML files app.use(express.static(\u0026#39;./www\u0026#39;))   ","description":"This week we will discuss getting and sending information between a browser-based client to and an API. We will also learn how to set up a login session.","id":32,"section":"w","tags":null,"title":"w11 Client-side scripting","uri":"https://comp426.johndmart.in/w/11/"},{"content":"Team Work Day 2022-04-05T15:30:00-05:00\nAgenda Meet with your teams and check in.\nPackage structure 2022-04-07T15:30:00-05:00\nAgenda  Where things happen is important Structure is communicative Documentation is important Assume nothing Getting started with a05  Useful links Project structure for an Express REST API whrn there is no \u0026ldquo;standard way\u0026rdquo; - Corey Cleary\nExpressJS How to structure an application? - StackOverflow\nExpress Code Structure - @focusaurus\nOrganizing your Express.js project structure for better productivity - Geshan Manandhar\nexpressjs-structure - @geshan\nA better project structure with Express and Node.js - Jugal Bhatt\nFile structure of node.js and Express application - Abhijeet Gurle\nHow I structure Express apps - Kent C. Dodds\n","description":"We will talk through rolling our interface into a package with a more complex directory structure.","id":33,"section":"w","tags":null,"title":"w12 Single-page interfaces and package structure","uri":"https://comp426.johndmart.in/w/12/"},{"content":"Intro to React 2022-04-12T15:30:00-05:00\nAgenda  What is React? Why React? Some React terms Make a grade calculator app with React  Useful links Where to start with React Create React App\nCreate a New React App - React\nReact tutorials Main Concepts - Hello World - React\nHow to build a basic form calculator in React.js - Guarav Singhal\nReact fundamentals: Props vs State - Kent C. Dodds\nReact with Node/Express create-app-react-express - NPM\nHow to Create a React App with a Node Backend: The Complete Guide - Reed Barger\nThoughts on React What I wish I had known about single page applications - Michael Pratt\nWhy You Should Use React.js For Web Development - Suraj Surve\nWhat And Why React.js - Nitin Pandit\nNotes Wellness day 2022-04-14T15:30:00-05:00\nNO CLASS\nAgenda  Be well.  ","description":"A React crash course with some OAuth thrown in for extra fun.","id":34,"section":"w","tags":null,"title":"w13 React","uri":"https://comp426.johndmart.in/w/13/"},{"content":"Local Auth Agenda 2022-04-21T15:30:00-05:00\n Roll-your-own Auth Implementing Auth with MongoDB, Express, and Node using Passport.js  Useful links Passport Passport.js\nNode.js and Express Authentication Using Passport - Dan Arias\nhey(node) This site required that you sign up for an account, but it IMMENSELY useful and the following links will the the basis for the demos this week.\nWhat Is the Difference Between Authorization and Authentication? (Part 1) - hey(node)\nWhat Are Form Validation and Sanitization? (Part 2\nProcess a User Login Form with ExpressJS (Part 3\nHow to Validate and Sanitize an ExpressJS Form (Part 4\nWhat Is the Difference Between Sessions and JSON Web Tokens (JWT) Authentication? (Part 5\nSet Up ExpressJS Session Authentication for Node Applications (Part 6\nAuthenticate Users With Node ExpressJS and Passport.js (Part 7) - hey(node)\nNode / Express Authentication Handling Authentication in Express.js - Janith Kasun\nExpressJS - Authentication - TutorialsPoint\nexpress-basic-auth - NPM\nNotes Third-party Auth 2022-04-19T15:30:00-05:00\nAgenda Third-party Auth OAuth Social login Passport.js  Useful Links Passport Oauth\npassport-oauth2\nOAuth Implementing OAuth 2.0 with Node.js - Soham Kamani\nUnderstanding and Implementing OAuth2 in Node.js - Diogo Souza\nImplementing an OAuth Server with Node.js and Express - Valeri Karpov\nExpress JS OAuth 2 server using oauth2-server package - Nick B. Alcala\n","description":"This week we will continue to look at single-page v. multi-page apps in React AND we will deploy a React app using Heroku","id":35,"section":"w","tags":null,"title":"w14 Auth","uri":"https://comp426.johndmart.in/w/14/"},{"content":"Course wrap up 2022-04-26T15:30:00-05:00\nAgenda  What can I say that I learned here? What else is there? How do I learn more? General discussion and inquiries  ","description":"In our final session, we will zoom out a bit and discuss what we have learned, what we didn't, and where to go from here.","id":36,"section":"w","tags":null,"title":"w15 Logging out","uri":"https://comp426.johndmart.in/w/15/"},{"content":"DUE: 2022-04-30T19:00:00-5:00 (End of Exam Period)\nGitHub Classroom Assignment Invite: [REDACTED]\nUPDATE 2022-02-17: You don\u0026rsquo;t need to accept this assignment since you are already assigned to teams. So, there is not assignment invite link for a99.\nGeneral final project issues and questions: https://github.com/comp426-2022-spring/a99\nSpecific issues should be addressed with your assigned instructional staff member via issues inside your team\u0026rsquo;s assignment repository.\nNOTE: You are all each individually responsible for submitting a final self- and team-assessment in addition to your team\u0026rsquo;s submission of the final project. Instructions will be available for that on the assignment page under FINAL.\nOverview As a small team, you will create an app that relates to providing, managing, collecting, or tracking information related to a public health event, phenomenon, or policy. This can take many forms, so here are a few ideas of the kind of app we are looking for:\n COVID-19 info dashboard Annual flu tracking app Disability advocacy platform Tracking app/portal for accessing mental health resources and information Emergengy/disaster management provider/public portal Disease outbreak tracking/prediction map Personal health information management app Public health historical information/data preservation and archiving system Portable universal electronic health record (EHR) system*   * This is sort of a reach for the stars type of idea. It\u0026rsquo;s entirely possible that someone may figure this problem out and develop a system or protocol for this that has the potential for wide adoption and there are a lot of really smart people working on it, BUT NO ONE HAS DONE IT YET. So, now is your chance to invent a thing that will revolutionize health care records management while also being compliant with personal health records laws in all of the places it may be used and does not face resistance from existing proprietary EHR vendors, etc. You can do it. I believe in you.\n Your team will be responsible for scoping, planning, and designing an app or system like one of those listed above, and also programming a working prototype.\nThe app should be fully documented, including setup instructions, full API documentation, and user instructions, as well as your planning workflow (notes, GitHub Project boards, discussions archives, etc.).\nYour team will create a \u0026lt;= 3-minute video describing your app to present to the class about your app. This can be a very basic walkthrough, or a description/presentation of features/use cases, or something else. Be creative. Think of it as an opportunity to hone your ability to pitch an idea that you have in prototype (because that is what it is).\nPhases Phase 1: Scoping and Planning In the planning phase, your team should start with brainstorming ideas and begin to develop an idea of what you want to create an app to do, what is feasible, and what you need to know to proceed. Your team will also want to think about task and labor structure: who is going to do what? Who keeps track of what? Who works on what aspects? Who is good at what?\nWhen? Ideally your team will begin this process by the last week in February.\nWhat to do? Set up a Project board on GitHub and assign it to your team so that you can manage brainstorming ideas and transition into designing and documenting. Choose a license. Use the README to document general information about the project and instructions to install or run it in whatever state it happens to be throughout the project.\nPhase 2: Designing and documenting In this phase, your team should begin sketching out the major parts of the system or app and looking at similar or related concepts to understand the state of the art. This is a good time to figure out how someone else is approaching a certain problem related to your app or system. Your team should use this information to then extend, adapt, and improve existing approaches, or make a radical departure and try something entirely new.\nWhen? In the beginning of March, your team should be pulling together a system design and documenting it in your team\u0026rsquo;s Project board and repository. During spring break, step back from the project and incubate the ideas and designs/sketches/schematics/plans/etc. that you have been working with. When we return from spring break, your team should start working on programming base components, laying out package structure, and making decisions about how different parts are articulated together.\nWhat? Keep notes and documentation in whatever form it takes in your teams\u0026rsquo;s GH repo. Use the project management tools in GitHub to keep track of things. Create a basic repository structure that your team can fork to begin working on components and features.\nPhase 3: Prototyping and Pitch In the last phase of this project, your team will pull together a working prototype. It does not have to be complete or polished: it just has to do the things that you want it to do in some form. You should also be cleaning up your documentation and moving it from documenting what was planned to documenting what is being executed in the prototype. This means noting what is currently working and what is not yet working or may work in a later iteration the design.\nYour team will also be working on a three-minute-or-less (\u0026lt;= 3 min) pitch video to show in one of the sessions in the last several sessions of class (21 and 26 April).\nWhen? At the beginning of April, your team should begin pulling a prototype together, settling into a set of prototype version features, and debugging it. Your team should be consolidating, organizing, cleaning-up, and clarifying documentation at this time. Your team should also be organizing the package that will contain all of the parts of your app and its documentation as a prototype release.\nBy mid-April, your team needs to be mostly debugging and working through changes to create your prototype release. During the third week in April, your team needs to create a video and make a pull request to get it in the queue to present during the last two sessions of class.\nWhat? Integrate new features using pull requests to your project repository on GitHub. Move cards from \u0026ldquo;In progress\u0026rdquo; to \u0026ldquo;Review\u0026rdquo; or \u0026ldquo;Finished\u0026rdquo; in your project plan. Work on documentation. Organize the software package. Prepare a prototype release. Make a video demo.\nDeliverables A GitHub repository containing your code and documentation and a prototype release package. Your project should take the form of a Node package, with all of the attendant items associated with that. The following three script commands should work in your package:\n npm install - Install dependencies for your package. npm test - Start app, check that everything can run, and then stop app. npm run - Command to bring up all parts of the app/system\u0026rsquo;s server scripts.  Your team is responsible for incorporating the following specifications and deliverables into your final project:\n Back-end specifications  API built on whatever framework you choose. You can build an API that interacts with other APIs as well in order to integrate them. API root endpoint at http://HOST/app/. Should create (if nonexistent) and interact with a database of users and interactions (this can be logs, even). These can be separate databases for different microservices or separate tables in one database. It is up to your team\u0026rsquo;s decisions. Database can be of any type you choose.   Front-end specifications  Give users the ability to register an account, update their information, see their information somewhere, and delete their account. Interactions with the front end should be logged in a database.   Database specifications  User database - registration details (username, email address, etc.) Interaction database - details of user interactions (login history, access logs, etc.)   Documentation  License documenation - Choose a license and include it in the repository just like we have been. README.md file with basic descriptiong, installation requirements/instructions, dependency list, run instructions /docs/ directory containing full documentation of every available API endpoint that you create for your app. This directory shoud also house an archive of your planning documentation. Code comments (preferably referring to the documentation) User instructions in the interface   Demo video  In order to get credit for this, add a row to the table in the README here and make a pull request: https://github.com/comp426-2022-spring/a99-demos/edit/main/README.md   Self/group evaluation (Individual group members: this is part of the final exam for the course.)  Logistics You will be working in a small team (up to 5 people) for the final project assignment.\nYour team will be responsible for planning the project, determining roles, and then employing a collaborative workflow to build out your project. Different people will be interested in different parts of the project. Not everyone has to do the same things, nor should they.\nYour team will also be responsible for meeting with an LA to check in weekly over the next few weeks to help you make progress through the assignment.\nThe project teams will be managed through GitHub classroom. Teams are created/assigned when you accept the assignment. So, if you have a group of people you want to work with, the best way to set this up is to meet and accept the assignment at the same time so that you can choose the team together. GH classroom is configured to cut off teams at 5 people.\nUsing collaboration features on GitHub The initial README.md file in your team\u0026rsquo;s GitHub repo has some beginning steps instructions in it. It is replicated below.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  # STOP!  Accept the final assignment a99 invite here: https://classroom.github.com/a/IbwBAA8J If you have done that already, then proceed. You MUST accept the assignment via the link above before you do ANYTHING else. # a99 Final Project  ## Summary  COMP426 final project template repository. All your code and documentation goes here. Change this text to be a brief description of your final project. Put the name of your project in the header above. You will change everything below to be the main technical documentation, as outlined below. ## First steps  Other steps that you will need to take after your team has accepted the assignment: 1. Choose a license and update the LICENSE file accordingly. 2. Edit this README.md file and use it as the main location of your technical documentation with links out to information contained under `/docs/`. 3. Create a `/docs/` directory for more elaborate documentation of your API, planning notes, etc. 4. Make sure that all of your team members have access to the repository as administrators. 5. Create a project under the **Projects** tab. Use this to manage your planning. Create a To-do list, etc. Explore the tools available and user them to manage your project. 7. Assign team roles and include a listing of those roles in this README.md file or in another file under `/docs/`. 8. Then put your entire development workflow in this repository. 9. Use **Pull requests** to propose changes and incorporate them into your code from various team members. 10. Use **Issues** to identify and track bugs and also to communicate about various aspects of the project. ## Team mangement  Plan to meet with your team ASAP. Talk through identifying roles within your team. Try to figure out what each of you are good at/enjoy doing and try to work out roles that incorporate that. Some basic roles you will want to consider: 1. A review manager - someone to review pull requests and merge or reject them and manage the related discussions 2. A plan manager - someone to keep an eye on the overall plan and keep the project tab/to-do list up to date 3. A documentation manager - someone to keep the documentation in order and identify what is missing and needs to be documented 4. A release manager - someone to manage the packaging and release process for your prototype package 5. A project manager - someone keeping track of all the moving parts and make sure that everything that needs to happen is happening. 5. Roles for team members to take charge or different parts of the project. Possible roles: 1. Front end lead 2. Back end lead 3. Database lead 4. Design lead 5. Etc. You will notice that there are more roles than people in your group. That is because you will all be doing a hybrid job of managing a thing while working on other things. ## Check in with instructional staff  Schedule a few times throughout the rest of the semester for your team to check-in with your assigned instructional staff member during their scheduled office hours. ## Assignment instructions  And that is about all you need to get started. All the rest of the assignment instructions are available at: https://comp426.johndmart.in/a/99 Good skill and be creative!   Pull requests Your team must use the fork and pull requests feature in GitHub to manage contributions, changes, and discussions about your code and documentation. This makes everything a lot easier and you are less likely to overwrite someone elses work, run into merge conflicts, etc. It is a built-in collaborative workflow.\nIssues Additionally, use the issues feature to manage bug-fixing and feature discussions. It makes things easier to keep track of. It also helps the instructional staff help you because there will be context and documentation related to your project that we can review when we meet with your team during office hours.\nProjects There is a \u0026ldquo;Projects\u0026rdquo; tab available in your team repo. Create a project board in the class GH organization and attach it to your team.\nThis is a great place to organize your work rather than relying on email, Google docs, Groupme, etc. This also allows us (the instructional staff) to see how your project is progressing and to help you with questions and issues because it will give us context.\nLicense your work In addition to the README above, you will find a LICENSE file in your team\u0026rsquo;s repo. This is provided as a placeholder so that you may replace it with the license of your choice.\nThe placeholder file contains some information about choosing a license and how to include it in your repository. Read through the links in this file and try out the decision tools to prepare for having a discussion with your team about licensing.\nMake sure that the license specified in your Node package.json file matches that in your LICENSE file.\nYou will want to change the text in this file to be the text of the license for your project. Information about choosing a license can be found here: [Licensing a repository](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository) [Choose an open source license](https://choosealicense.com/) [SPDX License List](https://spdx.org/licenses/) [Browse Software Licenses and Summaries](https://tldrlegal.com/licenses/browse) [How to choose a license for your own work](https://www.gnu.org/licenses/license-recommendations.en.html) - GNU Operating System [Public license selector](https://ufal.github.io/public-license-selector/) - Institute of Formal and Applied Linguistics (ÚFAL), Faculty of Mathematics and Physics, Charles University Expectations The expectations for this project is something along the lines of a working prototype. It does not have to be beautiful, it just has to work for the most part. And it does not have to be feature rich, it just has to do some pretty basic things.\nI expect and encourage inter-team collaboration as well. If there is something that your team finds useful: create a discussion in our class organization about it!\nThe repositories for this project will be created under the course organization as open source. This is intentional to encourage you to share things and learn from what your peers are doing.\nFinally, be creative!\nThis doesn\u0026rsquo;t mean that what you build has to be earth-shattering. It can be whatever your team wants it to be.\nPublic health as focus I have suggested building apps or systems for this project that relate to public health for several reasons, enumerated below.\n We are in the midst of an ongoing public health emergency. Focusing on what we can do in this context should help us better understand what is happening and how we can work within it/survive it. Public health is and has been a very hot field in recent years/decades in the tech sector. Public health research is increasingly a field that depends on computation, data, and information management methods. There is A LOT of work to be done in this area. Public health is a real, meaningful, and crucial area of thought and work for the current iteration of the human project. We need a wide variety of engagement with this area. SAVE THE WORLD. Or, at least try. And, in the process, maybe find a way to make something at least incrementally better.  You\u0026rsquo;ll have your whole careers to do boring stuff just because someone tells you or to be the someone telling someone to do boring stuff. I\u0026rsquo;m giving you an opportunity to do something that is engaging, timely, and addresses problems that we are experiencing in real time. We learn better when we are engaged in meaningful action that co-creates new things/knowledge/ways of knowing/ways of doing.\nSo, BE CREATIVE, and do interesting things!\n","description":"Create a public health information app or system using an interface to interact with a backend API \u0026 database.","id":37,"section":"a","tags":null,"title":"a99 Final Project","uri":"https://comp426.johndmart.in/a/99/"},{"content":"DUE: 2022-04-30T15:00:00-5:00\nGitHub Classroom invite link: COMING SOON\nThe instructions for the final are in the repository that will be automatically created for you when you accept the assignment using the link above.\nYou are responsible for completing this on your own.\nYou have until the end of the designated exam period to complete the final.\n","description":"The final for COMP 426 is a survey, just like the midterm. You will submit it in exactly the same way. It includes a self-assessment and a team assessment.","id":38,"section":"a","tags":null,"title":"FINAL","uri":"https://comp426.johndmart.in/a/final/"},{"content":"OAuth Implementing OAuth 2.0 with Node.js - Soham Kamani\nUnderstanding and Implementing OAuth2 in Node.js - Diogo Souza\nImplementing an OAuth Server with Node.js and Express - Valeri Karpov\nExpress JS OAuth 2 server using oauth2-server package - Nick B. Alcala\nPassport Node.js and Express authentication using Passport - Dan Arias\n","description":"Links about OAuth and integrating third-party authentication into authentication flows for Node/Express apps.","id":40,"section":"guide","tags":null,"title":"Authentication","uri":"https://comp426.johndmart.in/guide/authentication/"},{"content":"Bash is the name of the shell and command language that we use most frequently in Linux and other UNIX clones. Mac OSX is a UNIX clone. When you open \u0026ldquo;Terminal,\u0026rdquo; you are looking at Bash. It is a text-interface command line envrionment but it can also read commands from files in the form of scripts.\nLearning the shell - William E. Shotts, Jr.\nWriting shell scripts - William E. Shotts, Jr.\nWorking with CSVs on the Command Line - Brian Connelly\nShell Scripting Cheat Sheet for Unix and Linux - Steve Parker\nThe Ultimate Linux Command Line Guide - Full Bash Tutorial - freeCodeCamp\nBash Scripting Tutorial for Beginners - Lubos Rendek - LinuxConfig\nBash scripting Tutorial - LinuxConfig\n","description":"Bash is your best friend if you work on remote machines. You can navigate a system with no GUI and you can automate practically anything because it is a scripting language as well.","id":41,"section":"guide","tags":null,"title":"Bash","uri":"https://comp426.johndmart.in/guide/bash/"},{"content":"CSS is an acronym for \u0026ldquo;Cascading Style Sheet.\u0026rdquo; If HTML is the medium for web content, then CSS is the palette for the visual styling of the web. Whenever a website looks like anything other than just a blank page, there is CSS involved.\nCSS3 Cheat Sheet - Leslie Franke\nW3CSchools CSS Tutorial\n","description":"CSS3 is the current standard in styling markup on line. You can't make pretty things on the Internet without it.","id":42,"section":"guide","tags":null,"title":"CSS3","uri":"https://comp426.johndmart.in/guide/css3/"},{"content":"Introduction to fetch() - Matt Gaunt\nHow to Use the JavaScript Fetch API to Perform HTTP Requests - Ryan Glover\n","description":"Fetch allows you to make API calls so that you can use the resulting data in a browser-based or other client-side interface.","id":43,"section":"guide","tags":null,"title":"Fetch","uri":"https://comp426.johndmart.in/guide/fetch/"},{"content":"git is a distributed version control system that keeps track of the changes between plaintext source files. It can be used for collaboration or for managing and keeping track of workflows for individuals. While primarily intended for software source code, git works with any plaintext files, and so can also be used for authoring of other kinds.\ngit basics git official documentation\nYou should become conversant with the official documentation for git. It has everything you need to know, all in one place.\ngit - The Simple Guide (Download PDF)\nThe guide above is, hands down, the best, most straightfoward guide to get you going or refresh your memory for git commands.\n[An Ultimate Guide to git and GitHub - Suhail Kakar](https://dev.to/suhailkakar/an-ultimate-guide-to- git-and-github-20j)\nGit Cheat Sheet - GitHub\nGit Tutorials and Training - Atlassian\nUsing gitignore You can place a file in the root of your repository directory named .gitignore and add paths which will be specifically excluded by git when you add files and commit changes. This is a good idea to do with Node.js packages in particular, since otherwise you are just moving around a bunch of dependencices that can be automatically downloaded by npm instead.\nHow to add folder to gitignore - Edpresso Team\nA collection of .gitignore templates\nThis is a good resource. You will likely want to add the text from Node.gitignore to your .gitignore file for most assignments.\n","description":"Save your your whole workflow (and your sanity) with git. Never lose edits again.","id":44,"section":"guide","tags":null,"title":"git","uri":"https://comp426.johndmart.in/guide/git/"},{"content":"GitHub is a platform that allows for users to keep copies of their open source, plaintext repositories online, in a single centralized location. It also adds a social interaction layer to the process of managing version-controlled source files.\nGitHub Basics Hello World - GitHub Guides\nKeeping GitHub forks up to date with upstream source Keeping your forked repo synced with the upstream source - Nitin Venkatesh\nSyncing a fork - GitHub Help\n","description":"Keep your git repos in the cloud for redundancy and collaboration.","id":45,"section":"guide","tags":null,"title":"GitHub","uri":"https://comp426.johndmart.in/guide/github/"},{"content":"GitHub Actions allows for testing, compiling, and other workflow tasks to be performed on GitHub after you push to a repository housed there. COMP 426 uses these for autograding and other basic evaluation of assignments when you submit them. It is useful to become familiar with how it works so that you can monitor your autograded assignments when you submit them.\nGitHub Actions - GitHub Docs\n","description":"Automate a variety of test and compile workflows server-side on GitHub.","id":46,"section":"guide","tags":null,"title":"GitHub Actions","uri":"https://comp426.johndmart.in/guide/github-actions/"},{"content":"GitHub Classroom allows your instructors to distribute starter code for assignments, automatically create and manage repositories for student work, and automatically grade work sumbitted by push to GitHub. This is how all assignments will be managed for COMP426.\nYou can install an extension in VSCode that will let you simplify the process of accepting and submitting assignments.\nInstall GitHub Classroom extension on VSCode\n","description":"Interact with the assignments for COMP 426 in a GitHub Classroom instance.","id":47,"section":"guide","tags":null,"title":"GitHub Classroom","uri":"https://comp426.johndmart.in/guide/github-classroom/"},{"content":"HTML is an acronym for \u0026ldquo;HyperText Markup Language.\u0026rdquo; \u0026ldquo;Hypertext\u0026rdquo; is text that contains links to other text. The Web, as we know it, relies on hypertext to for us to communicate with systems and with other humans. It is the medium of Web content.\nHTML5 Cheat Sheet - WebsiteSetup.org\nW3CSchools HTML(5) Tutorial\n","description":"HTML has been with us from almost the beginning of the web. It's how we make the Internet accessible to humans.","id":48,"section":"guide","tags":null,"title":"HTML5","uri":"https://comp426.johndmart.in/guide/html5/"},{"content":"JavaScript Functions - w3schools\nFunctions - JavaScript - Mozilla Developer Network\nDifferences Between var and let - JavaScript Tutorials\n","description":"Some guides related to using functions in JavaScript.","id":50,"section":"guide","tags":null,"title":"JS Functions","uri":"https://comp426.johndmart.in/guide/functions/"},{"content":"Choosing licenses Choosing a license for your work can seem daunting, but it is a matter of deciding what you want to be able to do with your content or source code and how you want it to be distributed.\nGitHub GitHub has a very good guide to choosing licenses for your repositories and also a tool to help you through the process.\nChoose a License\nCustomize your repository \u0026gt; Licensing a repository - GitHub Docs\nNode.js This is a very thorough article about applying licenses to NPM dependencies and JS development.\nShould you care about the license? (TL;DR: yes!) - Vova Bilonenko\nThis list of licenses includes a list of all the expressions available to you when you create a new Node.js package using npm init.\nSPDX License List\nLicenses for content If you are building web applications that incorporate content, then you need to consider how that content it licensed. You may want or need to build in capacity for setting different licenses for different content. You may want to license various content related to your app.\nIn any case, it is good to be aware of how licenses for content work and how you can use them.\nCreative Commons is a good place to start. CC has a helpful license chooser that you can use to select a license based on how you want your content to be used.\nCC Chooser (beta)\nPublic Domain Licenses\nLicenses for software Ultimately, software (in the form of source code) is content. There is no special difference between licensing for content v. source, aside from the way that these licenses are used in practice.\nCopyleft \u0026ldquo;Copyleft\u0026rdquo; is a play on \u0026ldquo;copyright\u0026rdquo; and intended to express the opposite. If copyright preserves rights for written copy, then copyleft waives them (either partially or completely). Where copyright is restrictive, copyleft is permissive.\nCopyleft\nWhat is Copyleft?\nCopyleft vs. Copyright: 3 Key Concepts You Need to Know - Joel Lee\nOpen Source licenses Here are some other general guides to software licenses, with a focus on open source licensing.\nSoftware Licenses in Plain English - tl;dr legal\nLicenses and Standards - Open Source Initiative\n","description":"","id":51,"section":"guide","tags":null,"title":"Licenses","uri":"https://comp426.johndmart.in/guide/licenses/"},{"content":"Application Programming Interface (API) An API is the interface layer between two pieces of software that don\u0026rsquo;t necessarily speak the same langauge. The function of an API is to translate from one platform/piece of software to another.\nAn API call is a process through which requests are made and data is retrieved from an API by a client. It looks something like this:\n A client makes a request for some data. The requested data is retrieved from an external resource. The data is delivered to the client.  Data can also be manipulated by the API if write actions are permitted.\n A client requests that new data be added and supplies that data. The request is processed by some sort of middleware that interacts with an external resource. Confirmation of receipt and is returned to the client.  RESTful services and CRUD operations REST stands for \u0026ldquo;REpresentational State Transfer\u0026rdquo; and the architecture was originally proposed in a doctoral dissertation at University of California, Irvine by Roy Fielding in 2000.\nThe architecture for a RESTful service meets the following constraints:\n It has a client-server architecture: the user interface is separate from data storage. You will see this referred to as \u0026ldquo;front-end\u0026rdquo; (client) and \u0026ldquo;back-end\u0026rdquo; (server). It is stateles: all requests from the client must contain all information necessary for the server to process the request. State information has to remain on the client and cannot be stored on the server. It must have a client-side cache: this reduces the number of requests made to the server because the client can reuse information that it already has. It must have a uniform interface: this means that the architecture of the client-server interaction is simplified so that the two can be changed independently while still maintaining the same functionality. A uniform interface, as defined, has 4 parts:  Resources: Universal Resource Identifiers (URIs) that identify resources Representation manipulation: a representation of a resource must contain all of the information necessary to modify the resources itself. Self-contained messages: messages must include all information necessary to interpret them. Hypermedia as state: Clients communicate application state through requested URIs, body contents, query-string parameters, and request headers. Servers communicate application state back to clientsas URIs to retrieve objects, body contents, response codes, and response headers.   It must be a layered system: this restricts knowledge to the immediate layer with which the client is interacting by setting up a hierarchy of intermediaries. This is where middleware and distributed resources come into play. It must be capable of code-on-demand: this means that if the API documentation is avaialable, then it should be possible to create or extend a client based on the available endpoints. This constraint is optional, but it does mean that even if documentation is not available, it should be possible to reverse-engineer API calls.  HTTP methods and status codes You will want to familiarize yourself with REST API terminology and structure. Pay special attention to HTTP methods and status codes.\nThe REST API Tutorial\nSQL databases SQL is a language for interacting with data held in databases. SQL uses \u0026ldquo;statements\u0026rdquo; to structure queries. Statements are effectively commands and are (sort of) human readable.\nSome examples of SQL statements relevant to this class:\n1 2 3 4 5 6  CREATE TABLE table1 ( id INTEGER PRIMARY KEY, var1 TEXT, var2 TEXT ) INSERT INTO table1 (var1, var2) VALUES (somedata, someotherdata) SELECT * FROM table1 SELECT * FROM table1 WHERE id = 5 UPDATE table1 SET var1 = COALESCE(somenewdata,var1), var2 = COALESCE(othernewdata,var2) WHERE id = 5 DELETE * FROM table1 WHERE id = 5   Familiarize yourself with how SQL statements work. There are many, many resources available online.\n w3c SQL Tutorial SQL Tutorial for Beginners  We are using SQLite3 for this course, which implements SQL in locally stored database files that do not require a server. The syntax is basically the same, with a few differences.\nWe will be using a JS implementation of SQLite3 called better-sqlite. Full documentation of that implemntation is available here.\nExpress.js Express.js is a \u0026ldquo;minimalist\u0026rdquo; web framework that can be used to create both front- and backend applications in JavaScript. We will be using it to develop an API and consider its frontend components as well.\nExpress will be the main point of translation for connecting API endpoints to a database in our assignments.\nTranslation table The following is a table of \u0026ldquo;verbs\u0026rdquo; related to different components of our API ecosystem. This is provided to demonstrate how they relate to one another across languages and frameworks in both conceptual and practical terms.\n   CRUD SQL HTTP Express What does it do?     Create INSERT POST app.post() Makes a new record.   Read SELECT GET app.get() Retrieves an existing record.   Update (replace) REPLACE PUT app.put() Searches for a record and overwrites it. If it doesn\u0026rsquo;t exist, the record is createed.   Update (modify) UPDATE PATCH app.patch() Modifies the information in an existing record.   Delete DELETE DELETE app.delete() Removes an existing record.    ","description":"","id":52,"section":"module","tags":null,"title":"mod04 REST, CRUD, and databases","uri":"https://comp426.johndmart.in/module/mod04/"},{"content":"Network layer Cloudflare has an excellent tutorial series on the network layer. It is worth reading through the entire thing just to have a good general sense of the parts of networks, how they work, were they are, and what they do. The glossary is also excellent.\nWhat is the network layer? - Cloudflare\n","description":"Guides about how various aspects of networks operate, the OSI model, and internets.","id":53,"section":"guide","tags":null,"title":"Networks","uri":"https://comp426.johndmart.in/guide/networks/"},{"content":"Node.js v16.10.0 documentation\nECMAScript Modules (ESM) ECMAScript Modules (ESM) documentation\nUsing ECMAScript modules (ESM) with Node.js - Diogo Souza\n","description":"Node.js makes it possible to create and package JavaScript applications and manage dependencies.","id":54,"section":"guide","tags":null,"title":"Node","uri":"https://comp426.johndmart.in/guide/node/"},{"content":"General public APIs Public APIs - @public-apis\nCOVID-19 APIs COVID Act Now - Data API\nPostman COVID-19 API Resource Center\nCOVID-19 stream - Twitter Developer Platform\nData reference (not APIs) NCDHHS COVID-19 dashboard data\n","description":"Links to documentation for public APIs that you can use as sources for data of various kinds.","id":55,"section":"guide","tags":null,"title":"Public APIs","uri":"https://comp426.johndmart.in/guide/publicapis/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Mac running OSX.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome.\u0026rdquo; Accept the Agreement. Open the installer and follow it through completion.  git - Developer Tools  Click on the Spotlight icon, the magnifying glass in the top right corner of your screen (or press Command+Space) Type in the word \u0026ldquo;Terminal\u0026rdquo; and press Enter. In the window that pops up, type in the word \u0026ldquo;git\u0026rdquo; and press enter. You will be prompted to install Command Line Developer Tools. Agree to this, even if you are on battery power. Let the installation complete.  Text editor You can use either Visual Studio Code or VIM (or both) to edit text and write program code.\nVIM VIM is alread installed on MacOS as vi.\nTo bring it up to date, refer to the guide at vim.org: https://www.vim.org/download.php#mac\nVisual Studio Code - Programming Text Editor This semester, we will write all assignment code using the Visual Studio Code editor.\n Follow this link: https://code.visualstudio.com/#alt-downloads Download the Mac zip file  Double click the downloaded \u0026ldquo;VSCode-darwin-stable.zip\u0026rdquo; file. This extracts and creates an application named \u0026ldquo;Visual Studio Code\u0026rdquo; in your downloads folder. Drag the \u0026ldquo;Visual Studio Code\u0026rdquo; file from your Downloads folder to your Applications folder. You should see the Applications folder in the left-hand sidebar of your Finder window.  Node.js via NVM - JavaScript Runtime Use Node Version Manager (NVM) to install Node.js.\nFollow the install instructions avaialable at the GitHub repository for NVM:\nhttps://github.com/nvm-sh/nvm\nRestart your computer once all software has been installed.\nReturn to a00 main page\n","description":"Instructions for installing required software on Mac OSX","id":56,"section":"guide","tags":null,"title":"Software Setup for Mac OSX","uri":"https://comp426.johndmart.in/guide/software/mac/"},{"content":"To be a successful web developer in COMP 426, you\u0026rsquo;ll need to install some software on your computer. Follow the guide on this page if you have a Windows computer.\nChrome Web Browser Your projects in this course will run in a web browser. While most web browsers should work, we only support and test in the Google Chrome web browser. Install it by following the instructions below. We suggest making it your computer\u0026rsquo;s default web browser.\n Follow this link: https://www.google.com/chrome/ Select \u0026ldquo;Download Chrome\u0026rdquo; Accept the Agreement Open the ChromeSetup.exe installer and press \u0026ldquo;Yes\u0026rdquo; if prompted for permission to install  Text editor This semester, we will write all assignment code using either VSCode or VIM or both!\nVisual Studio Code (VSCode)  Follow this link: https://code.visualstudio.com/#alt-downloads Download the Windows installer  Open the downloaded installer  VIM Follow the instructions in this tutorial for installing VIM on Windows:\nhttps://linuxhint.com/install-vim-editor-on-windows/\nWindows Subsystem for Linux Windows Subsystem for Linux (WSL) lets you run a Linux development environment on Windows and access it from VSCode.\nMy recommendation is that you use Debian 11 as your chosen distro.\nFollow the instructions here to install it:\nhttps://docs.microsoft.com/en-us/windows/wsl/install\nSee this link for an overview of getting started with using WSL in VSCode:\nhttps://code.visualstudio.com/docs/remote/wsl#_getting-started\nInstall required software in WSL Node.js Follow the instructions in this tutorial for installing Node and related packages in WSL:\nhttps://docs.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-wsl\ngit If you are using Debian or a Debian-based distro like Ubuntu in your WSL, you can use apt to install software, like git.\nFollow the instructions in this tutorial for installing Git in WSL:\nhttps://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-git\nDirect install in Windows If you wish to also install Node and git in Windows natively (not a bad idea to have them available), you can see how to do that below.\nnode.js - JavaScript Runtime  Follow this link: https://nodejs.org/en/download Select the \u0026ldquo;Windows Installer\u0026rdquo; under the LTS tab. If given the option, select the 64-bit option.  After the download completes, open the installer. Continue through the installation screens using the default settings until the install is complete.  git and bash - Developer Tools  Follow this link: https://git-scm.com/downloads Select \u0026ldquo;Windows\u0026rdquo;  After the download completes, open it. Continue through the installation screens using the default settings until the install is complete.  Return to a00 main page\n","description":"Instructions for installing required software on Windows","id":57,"section":"guide","tags":null,"title":"Software setup for Windows","uri":"https://comp426.johndmart.in/guide/software/windows/"},{"content":"Here are some links to validators that you can use to check your assignment code. We will run all your code through a validator as part of your assignment submission. You should too.\nValidators will tell you exactly what you need to know to fix the errors in your code.\nHTML, CSS, etc. W3C Markup Validation Service (HTML)\nW3C has a bunch of different validators that can check CSS, web platforms (mobile ready), dead links, RSS, and one that checks all of these things.\nCollection of W3C validators\nJSON JSONLint - The JSON Validator\nJSON Formatter (Best JSON Formatter and Validator)\nJSON Formatter and Validator\nJavaScript JSHint, a JavaScript Code Quality Tool\nJavaScript Validator - Code Beautify\nOnline JavaScript Validator - BeautifyTools\n","description":"","id":58,"section":"guide","tags":null,"title":"Validators","uri":"https://comp426.johndmart.in/guide/validators/"},{"content":"Getting started guides This is a great series of video tutorials to help you get started using VSCode:\nhttps://code.visualstudio.com/docs/getstarted/introvideos\nI recommend starting with the first one and working your way through until you are comfortable using the various features in VSCode.\nEach video guide links out to other helpful information as well.\nWSL in VSCode The Windows Subsystem for Linux allows you to set up a Linux development environment without installing a virtual machine or manually setting up a separate container. These guides will help you get started installing and using it in VSCode:\nUse the Windows Subsystem for Linux (WSL)\nRemote development in WSL\nI recommend installing Debian as the Linux distro for your subsystem to run.\nOther WSL resources Get started with the Windows Subsystem for Linux. This MS tutorial will teach you everything you need to know about WSL in 1.5 hours.\nThe Ultimate Guide to Windows Subsystem for Linux - Chris Blackden\nGitHub in VSCode Using GitHub in VSCode is really easy:\nhttps://code.visualstudio.com/docs/editor/github\nCheck out and install the extensions listed here, and read the guide for integrating GitHub into your VSCode workspace for your assignments:\nhttps://docs.github.com/en/education/manage-coursework-with-github-classroom/integrate-github-classroom-with-an-ide/about-using-visual-studio-code-with-github-classroom\n","description":"","id":59,"section":"guide","tags":null,"title":"Visual Studio Code","uri":"https://comp426.johndmart.in/guide/vscode/"},{"content":"Web Application Programming Interfaces (APIs) are the core of everything else we do. They provide an interface between one piece of software and another.\nA web API exposes the underlying functions of a given program so that they can be used through web protocols. It also restricts access to a program by defining endpoints that only allow certain information to pass through.\nWhat is API design? - RedHat\nRESTful API design - MicroSoft\nBest practices for REST API design - John Au-Yeung and Ryan Donovan\nBest practices in API design - Swagger\n5 golden rules for great web API design - Jordan Ambra\n","description":"Web APIs are the core of everything else we do. They provide an interface between one piece of software and another. A web API exposes the underlying functions of a given program so that they can be used through web protocols. It also restricts access to a program by defining endpoints that only allow certain information to pass through.","id":60,"section":"guide","tags":null,"title":"Web API","uri":"https://comp426.johndmart.in/guide/api/"}]